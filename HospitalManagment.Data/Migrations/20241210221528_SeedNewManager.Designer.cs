// <auto-generated />
using System;
using HospitalManagmentApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalManagmentApp.Data.Migrations
{
    [DbContext(typeof(HMDbContext))]
    [Migration("20241210221528_SeedNewManager")]
    partial class SeedNewManager
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "78429ef3-6e8f-441a-8224-cf9a41152a2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e51d1656-9bdc-40d6-a294-5fd64a7e6729",
                            Email = "smith@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SMITH@ABV.BG",
                            NormalizedUserName = "SMITH@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ2Vna+rwQhfYdJTui/8xC8yflRy0cr7Dv/Vxlo8nSr4w3c3YJo1EcHDtot2vfQzWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bbe9f0d-e023-4b41-8b42-8f95b761fb3c",
                            TwoFactorEnabled = false,
                            UserName = "smith@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d55750a-80e1-46f5-8cb6-43af32099750",
                            Email = "jhondoe@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONDOE@ABV.BG",
                            NormalizedUserName = "JHONDOE@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEG4qLQlt6bRPJGbKjxc9aftf5Zg45sBzr6LHMUuwD/BekRAT4mTMG+3bQkrh8PJpOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48235346-81c6-4acc-9fef-532419a8362b",
                            TwoFactorEnabled = false,
                            UserName = "jhondoe@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "a15998c9-52af-4c6b-a032-b135b879e5a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ef6453e-6278-430e-bcbf-d74a9c5ab1f6",
                            Email = "jhonson@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONSON@ABV.BG",
                            NormalizedUserName = "JHONSON@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEA722B1HlAFBvjyfjU3Z4v6TAR2FAkKdLjrqACN62PvsCTaARcWVxFPWTF5H4WgqBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57295bd3-f359-4d85-9353-1ed6609aa32c",
                            TwoFactorEnabled = false,
                            UserName = "jhonson@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bde3117f-a8e2-4cd2-bfe4-7c8d163f4b52",
                            Email = "petrovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVP@ABV.BG",
                            NormalizedUserName = "PETROVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPguVU4dhH4/g4kgtQW47jFoZcvyCqQF5GIXvzKMe4pVVIoxW4CCuVQdFGO7uYKsOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84605b33-c802-49a5-aed5-069a7fe1888f",
                            TwoFactorEnabled = false,
                            UserName = "petrovp@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "18538144-c4ee-4d7d-b4eb-fd9267ca134f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf611d9f-34bf-4120-b227-7e666eef2803",
                            Email = "petrovai@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAI@ABV.BG",
                            NormalizedUserName = "PETROVAI@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAECSuAyeuZzMkwb0oL0t0qhkle42xCjXRuH58+kQuKtJ0DhZSkT7pZhCPlq5Vj56yFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ebc9437-a25e-4cbb-b411-fd5759672392",
                            TwoFactorEnabled = false,
                            UserName = "petrovai@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "c6e29719-7856-4b5f-b5da-84ed3a292877",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fd8842f-aae0-45d3-8900-4d2bc29bb399",
                            Email = "slaveykir@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEy1K4QtRZDNlG2oZatf+MRkMAEsbSpkxZ/EDIdFv4U0+wWY/4pZFLf3oc1TZJK+mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6baa8f9-c558-4915-8231-5a5564cfcdd5",
                            TwoFactorEnabled = false,
                            UserName = "slaveykir@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "57e1941c-1412-4384-b819-d67a19204baf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c816ac14-7e44-47ed-883a-a41556c5de95",
                            Email = "angelovz@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEO6H9L0/D64KFr+Qniiy8GOqXKLmU1famsFrmTPDs8/Nvi6nZD87wZAWetZP+tQc3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6ae5704-c723-4934-9024-0365f1c64fc5",
                            TwoFactorEnabled = false,
                            UserName = "angelovz@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "fddefbf4-e1a5-42a1-a64d-e0843640267c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ff833d4-f3d6-4dd4-b6af-4b77de31df04",
                            Email = "atanasovao@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEESvxlT+hdgDGEh0uxf7UcM1V33se/QweV98pmkAM+74L9KmUQeQUyqVqTfGj1uUqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ee0db30-ef4b-4f4d-87b9-ed8a6982c563",
                            TwoFactorEnabled = false,
                            UserName = "atanasovao@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "578c7c44-c4fd-43c0-bcb1-1daef85d7987",
                            Email = "williams@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLIAMS@ABV.BG",
                            NormalizedUserName = "WILLIAMS@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAECxpqBQic5X90+sB1FcMKt6vrVEOraaF+RAWxTmTID9yeuiq7qeXgaHCNXS09yd/bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "726970e9-fca1-4c9d-8db1-32f467e3282f",
                            TwoFactorEnabled = false,
                            UserName = "williams@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "0f1babbe-d5db-49b9-9624-47b9d69df236",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91aab0cc-a70a-4677-9842-bf6ffe7a4179",
                            Email = "brown@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BROWN@ABV.BG",
                            NormalizedUserName = "BROWN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEO430l30wszGzug38SkWGumMebRmbevl3XJ+UVBr6/U7X0Sj7xu4tqZRhjHEW77u6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1b6d9cc-d123-4f04-816d-6fd17fa7a68d",
                            TwoFactorEnabled = false,
                            UserName = "brown@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "06ea23a1-095e-475f-937e-cb3e34c4def2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dab80005-357e-4788-bb47-a132b164b3ef",
                            Email = "ivanovst@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVST@ABV.BG",
                            NormalizedUserName = "IVANOVST@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAbz0Cm+jI38LN0E7nawP/1yCHe2q5AqNJ06Se39Z30FEifTjFeq2qTlFNOBoCFQqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5344f644-f3e3-4b47-987f-34fb0f6531f3",
                            TwoFactorEnabled = false,
                            UserName = "ivanovst@abv.bg",
                            UserType = "Manager"
                        },
                        new
                        {
                            Id = "af558d53-8adc-45ba-bfdd-1ca9e11e7185",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9da1bb6a-2c73-4bfb-9040-0bc70057c658",
                            Email = "davissophia@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVISSOPHIA@ABV.BG",
                            NormalizedUserName = "DAVISSOPHIA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAsJrhc7UobZAZn98lIb09zwedYNNkfFtB0CJKJfqjy0QC+1josIC56urq0euewK6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0af69a4-a114-46aa-9255-ebcd23207697",
                            TwoFactorEnabled = false,
                            UserName = "davissophia@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "c55b3e3f-6604-4bf4-a9c8-014d0c146003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e2e4f9c-1513-4b84-b5e9-643b52421c4c",
                            Email = "miller@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MILLER@ABV.BG",
                            NormalizedUserName = "MILLER@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6ifXEkthi1TTiT8ATzCMP7dLjJp72hLtwFmUTIXXGpxTxC7ZoyaaCnjuE9LtydxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c31c9ae7-e22b-4970-8681-33e39e6d6b63",
                            TwoFactorEnabled = false,
                            UserName = "miller@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "3c8870b2-58cf-4341-8ea1-d024520563d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ba7767e-6a86-4786-b0e9-cac004451894",
                            Email = "taylor@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TAYLOR@ABV.BG",
                            NormalizedUserName = "TAYLOR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAIqDZYqOCZKoF6DFn52py3aRYxjE8JaelYTgM96N40PumSXi8HSETQ/TyLUb95B8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33c2eeb3-9f39-4579-8557-6972116ee200",
                            TwoFactorEnabled = false,
                            UserName = "taylor@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "7c032bc0-04e2-4111-bbfb-a59d46791529",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc6301f1-c43a-4269-bc92-776e2c735701",
                            Email = "taskovao@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGNaEREwXu7BPZdssNMtn1cEgBi9N2CJBkytVD7tm7ybUs/R5iWaZAdfLfZ82p8xQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7531cde4-5ee3-4a13-8f86-11ae8e28b5eb",
                            TwoFactorEnabled = false,
                            UserName = "taskovao@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "23fbee5b-fbe0-49a4-b312-6a5471f79dca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "898c5b4b-eef2-4332-be0a-7c9de7117c6d",
                            Email = "nikolovapa@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHFZ9dnafMM1lRaJY1HjseZVlfuho46y4hMxYduJfobsPiUxsIPQgY0MXoIhXbkZ5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3065fc4c-e7fa-43be-b72f-f2b64f4f1bc5",
                            TwoFactorEnabled = false,
                            UserName = "nikolovapa@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "17e9933d-2a1b-467b-b6a2-79297246b8b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3972310f-358c-4550-ba30-9989bf0d4b3d",
                            Email = "ivanovivan@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVIVAN@ABV.BG",
                            NormalizedUserName = "IVANOVIVAN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKYKRJFi4OH+BDo1SXRp9Qy3XCxk6moTRC3sfotGf766YzMqdCPkgxyccOCOXVqkPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b4cd0ab-9780-43f6-94fe-f19881fe9a28",
                            TwoFactorEnabled = false,
                            UserName = "ivanovivan@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5e43ce5-7a22-41c9-affe-9fe5afe91fd4",
                            Email = "stefanovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANOVP@ABV.BG",
                            NormalizedUserName = "STEFANOVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAELREZvce9RhPJZFfGSsO6/N5bPCfySUa7x+B3WrsI3jYB8+g7y3TiN7M4FPSu9GW5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92166180-a524-4ccf-a566-7af496367a3d",
                            TwoFactorEnabled = false,
                            UserName = "stefanovp@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "621fb5c5-b634-405d-951b-3088891c3d5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18f620c3-10dd-4530-a7a0-987c368d35c0",
                            Email = "petrovlazar@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVLAZAR@ABV.BG",
                            NormalizedUserName = "PETROVLAZAR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEBihxBSSFtKh4Go16A3Zx0kie4WuZzOKJ4ejv6Xd+4nDVwhm8MuYTeQOGjBW7ce9wA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac50d6c4-e4e2-4bb7-953c-236a16f40849",
                            TwoFactorEnabled = false,
                            UserName = "petrovlazar@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "dd5538d3-1f68-412f-9949-94edde16d8a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d4f0624-e99c-45fc-b1e2-b0a88e047f30",
                            Email = "petrovavanya@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAVANYA@ABV.BG",
                            NormalizedUserName = "PETROVAVANYA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEG/XtTvJCDcHp+4PpjbsijijJO7zP9HXiCaWlIwJ0HnQLXbbe/gCr+3ubxmrhTFJCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5fb4967d-c77c-4376-aed8-8c1e3c1d5a04",
                            TwoFactorEnabled = false,
                            UserName = "petrovavanya@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "a001bd24-5c2a-4f7a-b000-5f7bd233cd12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfdd9e41-fa2c-4ca3-a5c0-9a31952b6479",
                            Email = "james.anderson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEaB8FB460SEmDk8OwC3oolfxsiS/jbZnqnwAw1SU5y7EP5XKY6IKsgjOXr2r3LOJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0407d71d-dc61-4219-a6d4-c9756147b250",
                            TwoFactorEnabled = false,
                            UserName = "james.anderson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "134d8ce3-4c26-434a-90b4-f59ae5457a01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ff50f17-cd31-487f-973e-a4550bcbee1a",
                            Email = "mary.johnson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELjPUXzP68CQAM2lHCVRn30bpeWtG8FaW0x8nSwnUSXpE4fZ2E1nRL79O6FQU8E4nQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1e07854-7693-4db6-ab91-92376b6b5142",
                            TwoFactorEnabled = false,
                            UserName = "mary.johnson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "17139a72-76d4-4362-aa27-18a64cc8d285",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ae548f9-0102-4e86-95d6-d269132766a6",
                            Email = "robert.williams@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELghxEKaQTYZgv0WU34FIzrW2jlK41rTu/Do/tcv/M7xs4lWU522SlJA7/1c7YopTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47bd6431-ba61-4cd4-9131-4e9d1676fa8f",
                            TwoFactorEnabled = false,
                            UserName = "robert.williams@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "15050ff2-ed6c-475f-8831-f61d54a29175",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ff5f569-52b6-4e64-9b3b-f91fd6d8ecd6",
                            Email = "patricia.brown@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEK7a3pj8pgVCaNsFX3tY2CqdAE82nXSMi16q5VjXWT7iXVrRdj+3qL9oBcta/DGMGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9edf7b91-4539-4736-bb3e-4ceff6ad5133",
                            TwoFactorEnabled = false,
                            UserName = "patricia.brown@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "76222e29-cbf5-4335-b2e4-fa6a77afeab1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7080efca-3f6f-4352-97ae-1d0b9d18fe17",
                            Email = "jennifer.miller@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBVhad1qv20qk49dVqmHkBstfWuDdxucrcnc+KlfP8cY9SUCoJNK9N8QTD2OJ7XY+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d54df8e0-143f-4a4d-bcf5-13b9fccd61d7",
                            TwoFactorEnabled = false,
                            UserName = "jennifer.miller@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "3110d510-2d4d-4e84-9f69-84794965586d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fe2a95a-0ca1-44a3-a4f7-40fea6b2f017",
                            Email = "michael.wilson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEA5IwN5HNp0CHBNg2/59iMr3JTzi8x4CFA9fFa4zL2yYaoYykJhJ/inNgpqQtwYBlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02e52a74-d5c6-4fc1-937f-9d5a2db49bb0",
                            TwoFactorEnabled = false,
                            UserName = "michael.wilson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "d8d0d177-60a0-4925-b4ed-bb36aebb48c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a31c89c9-f0da-491d-b89f-7faed32b9206",
                            Email = "elizabeth.moore@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHVp7W8+cEGmcj8NJf/V6nFPtvrqtZClqQBJ7NASsMwXQ0WQ8qpgBSD1DFJByXIb5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94495932-f76f-4e8d-8a31-7bfb4222d514",
                            TwoFactorEnabled = false,
                            UserName = "elizabeth.moore@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "82c99b5d-6573-4514-81eb-183ace313419",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07ec4470-0bf1-4f00-b9e4-db0fb700d31c",
                            Email = "david.taylor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECQDTRzuFiRGw+THBs94YATQrR1mgFq/Kv9wFSdXd4SnTldnZAvg4HyCKAVFW/XgpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8153de75-07ad-469b-ac1b-3d100ed6db80",
                            TwoFactorEnabled = false,
                            UserName = "david.taylor@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "a8d287e8-357a-40f3-893a-ed507ed6a85d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c536a465-86a3-460b-9db2-8e95724cc40e",
                            Email = "susan.anderson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKLfkJhNKuMyIRJV9PO2z7f9eH86JUirN354jCBfzW6p7dtdRIw1sR0crdEViTWQIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "391a53f0-3c1c-4e8d-a83f-9a44fddfed08",
                            TwoFactorEnabled = false,
                            UserName = "susan.anderson@example.com",
                            UserType = "Patient"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the Department");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasComment("Department info");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            IsDeleted = false,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            IsDeleted = false,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            IsDeleted = false,
                            Name = "Internal"
                        },
                        new
                        {
                            Id = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            IsDeleted = false,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            IsDeleted = false,
                            Name = "Oncology"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor`s unique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department works the doctor");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Last Name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Doctor`s monthly salary");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Speciality");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors", t =>
                        {
                            t.HasComment("Doctor info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("78429ef3-6e8f-441a-8224-cf9a41152a2c"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "smith@abv.bg",
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Smith",
                            Salary = 1200m,
                            Specialty = "Cardiology",
                            UserId = "78429ef3-6e8f-441a-8224-cf9a41152a2c"
                        },
                        new
                        {
                            Id = new Guid("38a0afd0-c8d6-4674-b24a-db1e6861fcc8"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "jhondoe@abv.bg",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            Salary = 1000m,
                            Specialty = "Neurology",
                            UserId = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8"
                        },
                        new
                        {
                            Id = new Guid("a15998c9-52af-4c6b-a032-b135b879e5a7"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "jhonson@abv.bg",
                            FirstName = "Sara",
                            IsDeleted = false,
                            LastName = "Johnson",
                            Salary = 1150m,
                            Specialty = "Pediatrics",
                            UserId = "a15998c9-52af-4c6b-a032-b135b879e5a7"
                        },
                        new
                        {
                            Id = new Guid("0b04322a-bab8-41ca-b791-ec1abdd7e8a0"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovp@abv.bg",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Petrov",
                            Salary = 2150m,
                            Specialty = "Surgeon",
                            UserId = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0"
                        },
                        new
                        {
                            Id = new Guid("18538144-c4ee-4d7d-b4eb-fd9267ca134f"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovai@abv.bg",
                            FirstName = "Ivana",
                            IsDeleted = false,
                            LastName = "Petrova",
                            Salary = 4150m,
                            Specialty = "Surgeon",
                            UserId = "18538144-c4ee-4d7d-b4eb-fd9267ca134f"
                        },
                        new
                        {
                            Id = new Guid("c6e29719-7856-4b5f-b5da-84ed3a292877"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "slaveykir@abv.bg",
                            FirstName = "Slavey",
                            IsDeleted = false,
                            LastName = "Kirilov",
                            Salary = 6150m,
                            Specialty = "Oncologyst",
                            UserId = "c6e29719-7856-4b5f-b5da-84ed3a292877"
                        },
                        new
                        {
                            Id = new Guid("57e1941c-1412-4384-b819-d67a19204baf"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "angelovz@abv.bg",
                            FirstName = "Zhoro",
                            IsDeleted = false,
                            LastName = "Angelov",
                            Salary = 3750m,
                            Specialty = "Oncologyst",
                            UserId = "57e1941c-1412-4384-b819-d67a19204baf"
                        },
                        new
                        {
                            Id = new Guid("fddefbf4-e1a5-42a1-a64d-e0843640267c"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "atanasovao@abv.bg",
                            FirstName = "Olya",
                            IsDeleted = false,
                            LastName = "Atanasova",
                            Salary = 3250m,
                            Specialty = "Oncologyst",
                            UserId = "fddefbf4-e1a5-42a1-a64d-e0843640267c"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager unique identifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Manager Full Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Manager phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Data for Hospital Manager");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("06ea23a1-095e-475f-937e-cb3e34c4def2"),
                            EmailAddress = "ivanovst@abv.bg",
                            FullName = "Stoian Ivanov",
                            IsDeleted = false,
                            PhoneNumber = "+359883456789",
                            UserId = "06ea23a1-095e-475f-937e-cb3e34c4def2"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse unnique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse`s department");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse first name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse last name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Nurse monthly salary");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Nurses", t =>
                        {
                            t.HasComment("Nurse info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5c4962-15bb-4282-bfbf-5a0cd30ba664"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "williams@abv.bg",
                            FirstName = "Emma",
                            IsDeleted = false,
                            LastName = "Williams",
                            Salary = 650m,
                            UserId = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664"
                        },
                        new
                        {
                            Id = new Guid("0f1babbe-d5db-49b9-9624-47b9d69df236"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "brown@abv.bg",
                            FirstName = "Liam",
                            IsDeleted = false,
                            LastName = "Brown",
                            Salary = 1020m,
                            UserId = "0f1babbe-d5db-49b9-9624-47b9d69df236"
                        },
                        new
                        {
                            Id = new Guid("af558d53-8adc-45ba-bfdd-1ca9e11e7185"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "davissophia@abv.bg",
                            FirstName = "Sophia",
                            IsDeleted = false,
                            LastName = "Davis",
                            Salary = 670m,
                            UserId = "af558d53-8adc-45ba-bfdd-1ca9e11e7185"
                        },
                        new
                        {
                            Id = new Guid("c55b3e3f-6604-4bf4-a9c8-014d0c146003"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "miller@abv.bg",
                            FirstName = "Noah",
                            IsDeleted = false,
                            LastName = "Miller",
                            Salary = 640m,
                            UserId = "c55b3e3f-6604-4bf4-a9c8-014d0c146003"
                        },
                        new
                        {
                            Id = new Guid("3c8870b2-58cf-4341-8ea1-d024520563d0"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "taylor@abv.bg",
                            FirstName = "Olivia",
                            IsDeleted = false,
                            LastName = "Taylor",
                            Salary = 660m,
                            UserId = "3c8870b2-58cf-4341-8ea1-d024520563d0"
                        },
                        new
                        {
                            Id = new Guid("7c032bc0-04e2-4111-bbfb-a59d46791529"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "taskovao@abv.bg",
                            FirstName = "Olga",
                            IsDeleted = false,
                            LastName = "Taskova",
                            Salary = 680m,
                            UserId = "7c032bc0-04e2-4111-bbfb-a59d46791529"
                        },
                        new
                        {
                            Id = new Guid("23fbee5b-fbe0-49a4-b312-6a5471f79dca"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "nikolovapa@abv.bg",
                            FirstName = "Paola",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            Salary = 680m,
                            UserId = "23fbee5b-fbe0-49a4-b312-6a5471f79dca"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of Patient");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Patient address");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department the patient is assigned");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient Personal Citizen Number");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient First Name");

                    b.Property<bool>("HasMedicalInsurance")
                        .HasColumnType("bit")
                        .HasComment("Specify if the patient is insured");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient Last Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient phone number");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room of the patient");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients", t =>
                        {
                            t.HasComment("Patient Info Table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("45ff5a3c-c27e-4e62-8c90-4954281d46d0"),
                            Address = "Sofi, ul.Rezovo 13, et.2, ap.6",
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EGN = "4810234567",
                            EmailAddress = "ivanovivan@abv.bg",
                            FirstName = "Ivan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            UserId = "45ff5a3c-c27e-4e62-8c90-4954281d46d0"
                        },
                        new
                        {
                            Id = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            Address = "Sofi, ul.Belomorska, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6212094475",
                            EmailAddress = "stefanovp@abv.bg",
                            FirstName = "Petar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Stefanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415"
                        },
                        new
                        {
                            Id = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            Address = "Sofi, bul.Vitosha 123, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6102193476",
                            EmailAddress = "petrovlazar@abv.bg",
                            FirstName = "Lazar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "621fb5c5-b634-405d-951b-3088891c3d5c"
                        },
                        new
                        {
                            Id = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            Address = "Sofi, bul.Vitosha 3, et.7, ap.16",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "8302198562",
                            EmailAddress = "petrovavanya@abv.bg",
                            FirstName = "Vanya",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrova",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "dd5538d3-1f68-412f-9949-94edde16d8a2"
                        },
                        new
                        {
                            Id = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            Address = "Sofi, ul.Rezovo 13, et.2, ap.6",
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EGN = "4810234567",
                            EmailAddress = "ivanovivan@abv.bg",
                            FirstName = "Ivan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            UserId = "17e9933d-2a1b-467b-b6a2-79297246b8b3"
                        },
                        new
                        {
                            Id = new Guid("a001bd24-5c2a-4f7a-b000-5f7bd233cd12"),
                            Address = "123 Elm Street",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "1234567890",
                            EmailAddress = "james.anderson@example.com",
                            FirstName = "James",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Anderson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            UserId = "a001bd24-5c2a-4f7a-b000-5f7bd233cd12"
                        },
                        new
                        {
                            Id = new Guid("134d8ce3-4c26-434a-90b4-f59ae5457a01"),
                            Address = "456 Maple Avenue",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "2345678901",
                            EmailAddress = "mary.johnson@example.com",
                            FirstName = "Mary",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Johnson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            UserId = "134d8ce3-4c26-434a-90b4-f59ae5457a01"
                        },
                        new
                        {
                            Id = new Guid("17139a72-76d4-4362-aa27-18a64cc8d285"),
                            Address = "789 Oak Boulevard",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "3456789012",
                            EmailAddress = "robert.williams@example.com",
                            FirstName = "Robert",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Williams",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "17139a72-76d4-4362-aa27-18a64cc8d285"
                        },
                        new
                        {
                            Id = new Guid("15050ff2-ed6c-475f-8831-f61d54a29175"),
                            Address = "321 Pine Lane",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "4567890123",
                            EmailAddress = "patricia.brown@example.com",
                            FirstName = "Patricia",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Brown",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "15050ff2-ed6c-475f-8831-f61d54a29175"
                        },
                        new
                        {
                            Id = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            Address = "987 Birch Road",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "6789012345",
                            EmailAddress = "jennifer.miller@example.com",
                            FirstName = "Jennifer",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Miller",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "76222e29-cbf5-4335-b2e4-fa6a77afeab1"
                        },
                        new
                        {
                            Id = new Guid("3110d510-2d4d-4e84-9f69-84794965586d"),
                            Address = "159 Walnut Avenue",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "7890123456",
                            EmailAddress = "michael.wilson@example.com",
                            FirstName = "Michael",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Wilson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "3110d510-2d4d-4e84-9f69-84794965586d"
                        },
                        new
                        {
                            Id = new Guid("d8d0d177-60a0-4925-b4ed-bb36aebb48c4"),
                            Address = "159 Walnut Avenue",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "8901234567",
                            EmailAddress = "elizabeth.moore@example.com",
                            FirstName = "Elizabeth",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Moore",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "d8d0d177-60a0-4925-b4ed-bb36aebb48c4"
                        },
                        new
                        {
                            Id = new Guid("a8d287e8-357a-40f3-893a-ed507ed6a85d"),
                            Address = "123 Elm Court",
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EGN = "0123456789",
                            EmailAddress = "susan.anderson@example.com",
                            FirstName = "Susan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Anderson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("994355a8-add4-4d49-a52f-f610e4cb6893"),
                            UserId = "a8d287e8-357a-40f3-893a-ed507ed6a85d"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientsDoctors");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "TreatmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("PatientsTreatments");

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909")
                        },
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2")
                        },
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            TreatmentId = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2")
                        },
                        new
                        {
                            PatientId = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            TreatmentId = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("39bf20f4-81c8-4cd6-9262-61184c8d6b9a")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909")
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room unique identifier");

                    b.Property<int>("BedCount")
                        .HasColumnType("int")
                        .HasComment("Room`s beds count");

                    b.Property<Guid>("DepartmnetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department is the room");

                    b.Property<bool>("HasFreeBeds")
                        .HasColumnType("bit")
                        .HasComment("Does room has free beds?");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int")
                        .HasComment("Room Number");

                    b.HasKey("Id");

                    b.HasIndex("DepartmnetId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasComment("Room information table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            BedCount = 1,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = new Guid("fc4cc53a-2a34-4232-b63a-0724783fdfa3"),
                            BedCount = 2,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = new Guid("334c034e-51e8-4956-a6a5-f25ce92bf8fa"),
                            BedCount = 2,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 201
                        },
                        new
                        {
                            Id = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            BedCount = 3,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 202
                        },
                        new
                        {
                            Id = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            BedCount = 3,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 301
                        },
                        new
                        {
                            Id = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            BedCount = 2,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 302
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Treatment unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Treatments", t =>
                        {
                            t.HasComment("Treatment info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667"),
                            IsDeleted = false,
                            Name = "Manual Therapy",
                            Price = 100.0m
                        },
                        new
                        {
                            Id = new Guid("39bf20f4-81c8-4cd6-9262-61184c8d6b9a"),
                            IsDeleted = false,
                            Name = "Massage Therapy",
                            Price = 80.0m
                        },
                        new
                        {
                            Id = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909"),
                            IsDeleted = false,
                            Name = "Chiropractic Adjustment",
                            Price = 120.0m
                        },
                        new
                        {
                            Id = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2"),
                            IsDeleted = false,
                            Name = "Dialysis",
                            Price = 170.0m
                        },
                        new
                        {
                            Id = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0"),
                            IsDeleted = false,
                            Name = "Physical Therapy",
                            Price = 200.0m
                        },
                        new
                        {
                            Id = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c"),
                            IsDeleted = false,
                            Name = "Vaccination",
                            Price = 20.0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("DepartmentDoctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Managers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Nurses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Room", "Room")
                        .WithMany("Patients")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("Doctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("PatientTreatments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Treatment", "Treatment")
                        .WithMany("Patients")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmnetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Managers");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Navigation("DepartmentDoctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Navigation("DoctorPatients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("PatientTreatments");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
