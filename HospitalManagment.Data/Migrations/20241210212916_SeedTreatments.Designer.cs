// <auto-generated />
using System;
using HospitalManagmentApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalManagmentApp.Data.Migrations
{
    [DbContext(typeof(HMDbContext))]
    [Migration("20241210212916_SeedTreatments")]
    partial class SeedTreatments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "78429ef3-6e8f-441a-8224-cf9a41152a2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6afc4da6-49c7-4187-8f6b-e73ebedd2ea0",
                            Email = "smith@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SMITH@ABV.BG",
                            NormalizedUserName = "SMITH@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAECEqx/I9Pbz8VS/5oscIfWLHc5NNeya36Ctk1VBW1QCCEw0cGSeT6Tlexd04TrXaJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f895e9a6-9a7c-4ceb-b176-d5f477f0339f",
                            TwoFactorEnabled = false,
                            UserName = "smith@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46ce4c6b-a099-4d53-8edb-78aeb54a0431",
                            Email = "jhondoe@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONDOE@ABV.BG",
                            NormalizedUserName = "JHONDOE@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAELnE6eYtUKFe7W0IcPUu+D99EZzY6Ka4ZrVJTP1x8QZbbGwfLyj4PrasLPwlB5T21Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6edb2a40-50cd-4f52-9a49-3d3a54971099",
                            TwoFactorEnabled = false,
                            UserName = "jhondoe@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "a15998c9-52af-4c6b-a032-b135b879e5a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "916f83ad-bbba-46fc-8764-1bf13891f616",
                            Email = "jhonson@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONSON@ABV.BG",
                            NormalizedUserName = "JHONSON@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAENOdib4Ew3D/gc/9K5Dsp9RSayJE5ilS8w1WyYQXA7PTGOJ29ZRuMOErTvtmx9426g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9485d726-7fcd-4d41-85f9-bfaa7b749c61",
                            TwoFactorEnabled = false,
                            UserName = "jhonson@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "021dcb56-3ca9-4a84-9ecd-e16aa5d7a059",
                            Email = "petrovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVP@ABV.BG",
                            NormalizedUserName = "PETROVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEDokB7PyQ50a+GWMn63hiTGrUaR5RQyqSJruKhaSfYSt7Vqy1xE5iRM9J+Cg8lvQ3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99a87b5a-c92a-4919-ba51-6e9768fd9966",
                            TwoFactorEnabled = false,
                            UserName = "petrovp@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "18538144-c4ee-4d7d-b4eb-fd9267ca134f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f9587c3-af2f-4e1d-a4a8-43d46cd42f52",
                            Email = "petrovai@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAI@ABV.BG",
                            NormalizedUserName = "PETROVAI@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEGkqvjnAikK1UKHRUEtxfaq9CwGX6xK0FQ1GscsgDHH/siQLi2FBzWzTrSDvYWWKJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e98d058-c069-47ee-abc9-dfc2459811a8",
                            TwoFactorEnabled = false,
                            UserName = "petrovai@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "c6e29719-7856-4b5f-b5da-84ed3a292877",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c847e10-a3cb-437b-a81c-98ef34de340b",
                            Email = "slaveykir@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDp8CgkN2OeybQSuZQZ8eP0Kz/Htl7vd+d7BEXJ00so3J5q5aF54fAgd0Dmzxl0IMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1798d64-97b2-46f8-91a1-602c373021be",
                            TwoFactorEnabled = false,
                            UserName = "slaveykir@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "57e1941c-1412-4384-b819-d67a19204baf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adbdb5be-7225-4597-a9af-797f4cf8e6aa",
                            Email = "angelovz@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEE2c6AhGcEzHg/bxWHGI7ifpKvpfY4Cxw/0KutpXZwOq+/ne4RnYm91N0np5K+rlUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86a9704f-9180-46f1-bd28-004564480797",
                            TwoFactorEnabled = false,
                            UserName = "angelovz@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "fddefbf4-e1a5-42a1-a64d-e0843640267c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deb14eaf-fc13-4d9f-89f6-8c98428d05a4",
                            Email = "atanasovao@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDSCOGwKwuRairhOO9b7zuEDqyglp9idiPE2uy8Bm/s5Bpah0DMCHSA9Fh7yQ42SMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bf65037-2305-4d8e-97ce-d0c05917e764",
                            TwoFactorEnabled = false,
                            UserName = "atanasovao@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcdbde91-dd1c-4eb6-a134-59d109abb3f2",
                            Email = "williams@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLIAMS@ABV.BG",
                            NormalizedUserName = "WILLIAMS@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEMb5pBJbZnwoDwCJ03G4iqsA0dXWJ79V8Nik31jZIGbRAXT4DInQaiRiCcol3bMkwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b26c77ab-1495-4843-88d0-86ffe1d940df",
                            TwoFactorEnabled = false,
                            UserName = "williams@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "0f1babbe-d5db-49b9-9624-47b9d69df236",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bc9c16e-ba65-4928-8274-11ec4b79695b",
                            Email = "brown@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BROWN@ABV.BG",
                            NormalizedUserName = "BROWN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ3Z1Njvm7ZtSNSYv/cK0xn+94L7FMfLZy630tRbyurdE7KYvwNXdAgb1lfkw30kCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c7834c7-a3e6-4cdf-a0bb-0cd8baf94d79",
                            TwoFactorEnabled = false,
                            UserName = "brown@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "06ea23a1-095e-475f-937e-cb3e34c4def2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10be3d3c-182d-435f-833c-82336327bc0c",
                            Email = "ivanovst@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVST@ABV.BG",
                            NormalizedUserName = "IVANOVST@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKDk+QMm2NcoZbMcA+3exSnQbo+jo7+uZsrno7UM1cktwzMQloFcKPNSDZiduORHBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef151d11-2957-423d-8842-c655b60767c6",
                            TwoFactorEnabled = false,
                            UserName = "ivanovst@abv.bg",
                            UserType = "Manager"
                        },
                        new
                        {
                            Id = "af558d53-8adc-45ba-bfdd-1ca9e11e7185",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aaa43081-2ef0-4797-bea4-b3f6121d37ee",
                            Email = "davissophia@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVISSOPHIA@ABV.BG",
                            NormalizedUserName = "DAVISSOPHIA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEK8zv4oS5Vx8MJumGONceBM8SItl/7GZA8VZhN+jihcb0r+A68/WZGFYNA67TQCSKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32915e8a-7f37-412e-8699-ba6a2836ad9c",
                            TwoFactorEnabled = false,
                            UserName = "davissophia@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "c55b3e3f-6604-4bf4-a9c8-014d0c146003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb174e18-9a7b-4852-931a-039254763aa4",
                            Email = "miller@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MILLER@ABV.BG",
                            NormalizedUserName = "MILLER@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPnqobNs3el0AIin9UeKbU2pj5mpahSEEAC+pEeFPWBgoNc/O06NOIRGByPJfa1bIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4062f3c0-2044-4b0a-8ed5-26f939a092d4",
                            TwoFactorEnabled = false,
                            UserName = "miller@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "3c8870b2-58cf-4341-8ea1-d024520563d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c60159e0-7c95-4d96-a494-cfeb09f963a5",
                            Email = "taylor@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TAYLOR@ABV.BG",
                            NormalizedUserName = "TAYLOR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEIV4oHpHQsVZw+a9an4EKrnHd/mi+hafrLqAfAH2/D/TweLzTEejw5sXhzhuxyGmDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44f3ff48-1ec4-43f4-8099-4a624684fe1c",
                            TwoFactorEnabled = false,
                            UserName = "taylor@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "7c032bc0-04e2-4111-bbfb-a59d46791529",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "405419ca-a586-4ea6-b023-c8f82ae0b0be",
                            Email = "taskovao@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEM8W00qSjkY6+TYm3uJKs37dQROp6kNdlZfZbt97Txqo68J4IQKOcyiTGqcOjECYrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4e9610c-fdb1-4e4a-b7e2-e9267797916e",
                            TwoFactorEnabled = false,
                            UserName = "taskovao@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "23fbee5b-fbe0-49a4-b312-6a5471f79dca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8818b4ed-5618-4d97-8f80-0dcaa137b56d",
                            Email = "nikolovapa@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJuVbNcbvpeROip8mQkorEVYu7+G8ktyYOZIBC4tEEZillzxYoTeRKYJ6QL4hJ5KiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bf200f1-6955-4003-9168-8ad76eba71c9",
                            TwoFactorEnabled = false,
                            UserName = "nikolovapa@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "17e9933d-2a1b-467b-b6a2-79297246b8b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4e673cb-58d8-465a-837e-9091325dfca8",
                            Email = "ivanovivan@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVIVAN@ABV.BG",
                            NormalizedUserName = "IVANOVIVAN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEGl06yUEh9uNjrCpGxhDn3oDtWr95wjUwkdEh2JkHLSGuk4QYGTrtWsZ2n4HUblf7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfa3ea0b-ab8b-4629-917f-15f4c7511115",
                            TwoFactorEnabled = false,
                            UserName = "ivanovivan@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7dc10b5-6478-412a-8573-fdc72519b2a9",
                            Email = "stefanovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANOVP@ABV.BG",
                            NormalizedUserName = "STEFANOVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKj+AQX+27OmoBBZ191/cRQS2FpU/6EqCPWsMVYvVGuazSuHv4oTGLi3ZuFm8hhZmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2ef069c-bd7f-4973-bcc3-b106a6dabd1e",
                            TwoFactorEnabled = false,
                            UserName = "stefanovp@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "621fb5c5-b634-405d-951b-3088891c3d5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b5a385a-a838-4677-8340-ec736567293b",
                            Email = "petrovlazar@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVLAZAR@ABV.BG",
                            NormalizedUserName = "PETROVLAZAR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEEJkb39jHfSuN5+rwGZ87ma2ay0KVsK0AzhdmTmXOsnWaUwK6aEcJ4dsaD+Rdv7bgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f029b546-0ae1-4e51-b54d-297eff3a2d1d",
                            TwoFactorEnabled = false,
                            UserName = "petrovlazar@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "dd5538d3-1f68-412f-9949-94edde16d8a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2379692a-b52e-4dd5-8693-64e4c504309d",
                            Email = "petrovavanya@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAVANYA@ABV.BG",
                            NormalizedUserName = "PETROVAVANYA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKtVEyWsUDsIeQ14mucb3WF9OxX1utAlNZpHvFGb2oUpBlhdEtIL38eCkyfBCfWSlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9997a7f4-3ede-4d84-a64e-4efab18b93cf",
                            TwoFactorEnabled = false,
                            UserName = "petrovavanya@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "a001bd24-5c2a-4f7a-b000-5f7bd233cd12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "908a9388-efa6-4131-933f-b34ad61760c2",
                            Email = "james.anderson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMjWy0n5X0Kxg55FN9KS/hJrt+T/xRMlabyE8/xFP9HmkEwNiIjePWxBp6Llrd81Dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "166fd977-917a-47ee-bad2-76fb824590a5",
                            TwoFactorEnabled = false,
                            UserName = "james.anderson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "134d8ce3-4c26-434a-90b4-f59ae5457a01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74f289a2-8f5f-42c7-b1de-bca169b87329",
                            Email = "mary.johnson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOJqYubD0ljqlmNcqnqarDJzXZPnIwDsnq4Vyb2D+Vn4n+HnL6m3VY6VZyoTLaWW5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2204ff6-537d-4e8a-8539-afad2f99a59c",
                            TwoFactorEnabled = false,
                            UserName = "mary.johnson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "17139a72-76d4-4362-aa27-18a64cc8d285",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3af15726-2db8-4625-9034-04ac0fd65c5d",
                            Email = "robert.williams@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAodrbDlKPEfIgtkGw+lmhMeGvFG7WzgE4ZGYvEbVlb4bZCxRrGtqwAtaMW9BxgAbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a42869a-afdb-4f52-8fc9-2a8831abd7ba",
                            TwoFactorEnabled = false,
                            UserName = "robert.williams@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "15050ff2-ed6c-475f-8831-f61d54a29175",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93973b75-8fff-431b-8096-f42cd178a0a9",
                            Email = "patricia.brown@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEC3GS2y+/SKsdqGtZy7aiP+kiAkakc5MmWrPujs+Jquo5e4wf4uMR1ihJ8r/iECUOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65083aaf-3055-46b0-826e-3cdf085d0492",
                            TwoFactorEnabled = false,
                            UserName = "patricia.brown@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "76222e29-cbf5-4335-b2e4-fa6a77afeab1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64ded8a6-d820-4502-8919-30cbbe1fb8d4",
                            Email = "jennifer.miller@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEM+UYT7zjgiGXqr9o2PSDbbLEr8ap4E+RQn3tYJa2FCapvtQnFe0Z4covbUX0BRRiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afa83884-aad6-4480-b8b0-6483a062aed6",
                            TwoFactorEnabled = false,
                            UserName = "jennifer.miller@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "3110d510-2d4d-4e84-9f69-84794965586d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d240169b-08c2-45b1-8211-dc350559fb36",
                            Email = "michael.wilson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELRlIRr80U+L929mEzdbFFUEy0H3djKEdFq+M9pG9AxbrQhkrdGiA7YsJlvS8HZQ1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06bea402-a71f-4b12-bf50-d1e1f6a4876b",
                            TwoFactorEnabled = false,
                            UserName = "michael.wilson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "d8d0d177-60a0-4925-b4ed-bb36aebb48c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ed67088-fe3b-4356-aa8d-975ea9b520c9",
                            Email = "elizabeth.moore@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAJdE/IOB+vmWGijK3EYOnqAn2mmAn5z7sf3jaNFD/ASL928rKHoQKS8i5ODvpwWkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08d0b690-6bd4-42eb-8da8-abb9e0d936e2",
                            TwoFactorEnabled = false,
                            UserName = "elizabeth.moore@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "82c99b5d-6573-4514-81eb-183ace313419",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65cff1e7-2fb0-409a-922d-2bb9c22dd0cb",
                            Email = "david.taylor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMKEJzV7cQP16NtdNRHLqQ3vSljNG/0303cC7n/YCZ/mR3BgO0fGMY0llYrA8guxDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8dbe37c9-83b6-4853-bb51-2a05c50d9744",
                            TwoFactorEnabled = false,
                            UserName = "david.taylor@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "a8d287e8-357a-40f3-893a-ed507ed6a85d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13543179-faea-4d03-9fce-d4b8b136f47e",
                            Email = "susan.anderson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDmKxzZ/cysqnvYUdvOxq+8JvgxNyFWD8QXtL6DxqsyyNTLaK71QTWsI0R4Q9VjAsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91961b5a-1c7d-4608-83ee-a01bafba7053",
                            TwoFactorEnabled = false,
                            UserName = "susan.anderson@example.com",
                            UserType = "Patient"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the Department");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasComment("Department info");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            IsDeleted = false,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            IsDeleted = false,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            IsDeleted = false,
                            Name = "Internal"
                        },
                        new
                        {
                            Id = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            IsDeleted = false,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            IsDeleted = false,
                            Name = "Oncology"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor`s unique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department works the doctor");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Last Name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Doctor`s monthly salary");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Speciality");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors", t =>
                        {
                            t.HasComment("Doctor info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("78429ef3-6e8f-441a-8224-cf9a41152a2c"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "smith@abv.bg",
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Smith",
                            Salary = 1200m,
                            Specialty = "Cardiology",
                            UserId = "78429ef3-6e8f-441a-8224-cf9a41152a2c"
                        },
                        new
                        {
                            Id = new Guid("38a0afd0-c8d6-4674-b24a-db1e6861fcc8"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "jhondoe@abv.bg",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            Salary = 1000m,
                            Specialty = "Neurology",
                            UserId = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8"
                        },
                        new
                        {
                            Id = new Guid("a15998c9-52af-4c6b-a032-b135b879e5a7"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "jhonson@abv.bg",
                            FirstName = "Sara",
                            IsDeleted = false,
                            LastName = "Johnson",
                            Salary = 1150m,
                            Specialty = "Pediatrics",
                            UserId = "a15998c9-52af-4c6b-a032-b135b879e5a7"
                        },
                        new
                        {
                            Id = new Guid("0b04322a-bab8-41ca-b791-ec1abdd7e8a0"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovp@abv.bg",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Petrov",
                            Salary = 2150m,
                            Specialty = "Surgeon",
                            UserId = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0"
                        },
                        new
                        {
                            Id = new Guid("18538144-c4ee-4d7d-b4eb-fd9267ca134f"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovai@abv.bg",
                            FirstName = "Ivana",
                            IsDeleted = false,
                            LastName = "Petrova",
                            Salary = 4150m,
                            Specialty = "Surgeon",
                            UserId = "18538144-c4ee-4d7d-b4eb-fd9267ca134f"
                        },
                        new
                        {
                            Id = new Guid("c6e29719-7856-4b5f-b5da-84ed3a292877"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "slaveykir@abv.bg",
                            FirstName = "Slavey",
                            IsDeleted = false,
                            LastName = "Kirilov",
                            Salary = 6150m,
                            Specialty = "Oncologyst",
                            UserId = "c6e29719-7856-4b5f-b5da-84ed3a292877"
                        },
                        new
                        {
                            Id = new Guid("57e1941c-1412-4384-b819-d67a19204baf"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "angelovz@abv.bg",
                            FirstName = "Zhoro",
                            IsDeleted = false,
                            LastName = "Angelov",
                            Salary = 3750m,
                            Specialty = "Oncologyst",
                            UserId = "57e1941c-1412-4384-b819-d67a19204baf"
                        },
                        new
                        {
                            Id = new Guid("fddefbf4-e1a5-42a1-a64d-e0843640267c"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "atanasovao@abv.bg",
                            FirstName = "Olya",
                            IsDeleted = false,
                            LastName = "Atanasova",
                            Salary = 3250m,
                            Specialty = "Oncologyst",
                            UserId = "fddefbf4-e1a5-42a1-a64d-e0843640267c"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager unique identifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Manager Full Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Manager phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Data for Hospital Manager");
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse unnique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse`s department");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse first name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse last name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Nurse monthly salary");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Nurses", t =>
                        {
                            t.HasComment("Nurse info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5c4962-15bb-4282-bfbf-5a0cd30ba664"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "williams@abv.bg",
                            FirstName = "Emma",
                            IsDeleted = false,
                            LastName = "Williams",
                            Salary = 650m,
                            UserId = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664"
                        },
                        new
                        {
                            Id = new Guid("0f1babbe-d5db-49b9-9624-47b9d69df236"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "brown@abv.bg",
                            FirstName = "Liam",
                            IsDeleted = false,
                            LastName = "Brown",
                            Salary = 1020m,
                            UserId = "0f1babbe-d5db-49b9-9624-47b9d69df236"
                        },
                        new
                        {
                            Id = new Guid("af558d53-8adc-45ba-bfdd-1ca9e11e7185"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "davissophia@abv.bg",
                            FirstName = "Sophia",
                            IsDeleted = false,
                            LastName = "Davis",
                            Salary = 670m,
                            UserId = "af558d53-8adc-45ba-bfdd-1ca9e11e7185"
                        },
                        new
                        {
                            Id = new Guid("c55b3e3f-6604-4bf4-a9c8-014d0c146003"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "miller@abv.bg",
                            FirstName = "Noah",
                            IsDeleted = false,
                            LastName = "Miller",
                            Salary = 640m,
                            UserId = "c55b3e3f-6604-4bf4-a9c8-014d0c146003"
                        },
                        new
                        {
                            Id = new Guid("3c8870b2-58cf-4341-8ea1-d024520563d0"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "taylor@abv.bg",
                            FirstName = "Olivia",
                            IsDeleted = false,
                            LastName = "Taylor",
                            Salary = 660m,
                            UserId = "3c8870b2-58cf-4341-8ea1-d024520563d0"
                        },
                        new
                        {
                            Id = new Guid("7c032bc0-04e2-4111-bbfb-a59d46791529"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "taskovao@abv.bg",
                            FirstName = "Olga",
                            IsDeleted = false,
                            LastName = "Taskova",
                            Salary = 680m,
                            UserId = "7c032bc0-04e2-4111-bbfb-a59d46791529"
                        },
                        new
                        {
                            Id = new Guid("23fbee5b-fbe0-49a4-b312-6a5471f79dca"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "nikolovapa@abv.bg",
                            FirstName = "Paola",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            Salary = 680m,
                            UserId = "23fbee5b-fbe0-49a4-b312-6a5471f79dca"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of Patient");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Patient address");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department the patient is assigned");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient Personal Citizen Number");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient First Name");

                    b.Property<bool>("HasMedicalInsurance")
                        .HasColumnType("bit")
                        .HasComment("Specify if the patient is insured");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient Last Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient phone number");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room of the patient");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients", t =>
                        {
                            t.HasComment("Patient Info Table");
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientsDoctors");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "TreatmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("PatientsTreatments");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room unique identifier");

                    b.Property<int>("BedCount")
                        .HasColumnType("int")
                        .HasComment("Room`s beds count");

                    b.Property<Guid>("DepartmnetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department is the room");

                    b.Property<bool>("HasFreeBeds")
                        .HasColumnType("bit")
                        .HasComment("Does room has free beds?");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int")
                        .HasComment("Room Number");

                    b.HasKey("Id");

                    b.HasIndex("DepartmnetId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasComment("Room information table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            BedCount = 1,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = new Guid("fc4cc53a-2a34-4232-b63a-0724783fdfa3"),
                            BedCount = 2,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = new Guid("334c034e-51e8-4956-a6a5-f25ce92bf8fa"),
                            BedCount = 2,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 201
                        },
                        new
                        {
                            Id = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            BedCount = 3,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 202
                        },
                        new
                        {
                            Id = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            BedCount = 3,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 301
                        },
                        new
                        {
                            Id = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            BedCount = 2,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 302
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Treatment unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Treatments", t =>
                        {
                            t.HasComment("Treatment info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667"),
                            IsDeleted = false,
                            Name = "Manual Therapy",
                            Price = 100.0m
                        },
                        new
                        {
                            Id = new Guid("39bf20f4-81c8-4cd6-9262-61184c8d6b9a"),
                            IsDeleted = false,
                            Name = "Massage Therapy",
                            Price = 80.0m
                        },
                        new
                        {
                            Id = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909"),
                            IsDeleted = false,
                            Name = "Chiropractic Adjustment",
                            Price = 120.0m
                        },
                        new
                        {
                            Id = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2"),
                            IsDeleted = false,
                            Name = "Dialysis",
                            Price = 170.0m
                        },
                        new
                        {
                            Id = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0"),
                            IsDeleted = false,
                            Name = "Physical Therapy",
                            Price = 200.0m
                        },
                        new
                        {
                            Id = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c"),
                            IsDeleted = false,
                            Name = "Vaccination",
                            Price = 20.0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("DepartmentDoctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Managers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Nurses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Room", "Room")
                        .WithMany("Patients")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("Doctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("PatientTreatments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Treatment", "Treatment")
                        .WithMany("Patients")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmnetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Managers");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Navigation("DepartmentDoctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Navigation("DoctorPatients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("PatientTreatments");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
