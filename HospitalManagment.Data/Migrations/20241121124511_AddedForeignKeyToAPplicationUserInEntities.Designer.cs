// <auto-generated />
using System;
using HospitalManagmentApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalManagmentApp.Data.Migrations
{
    [DbContext(typeof(HMDbContext))]
    [Migration("20241121124511_AddedForeignKeyToAPplicationUserInEntities")]
    partial class AddedForeignKeyToAPplicationUserInEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "smith@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9958924-fa11-4000-a74a-197200ccb8e8",
                            Email = "smith@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SMITH@ABV.BG",
                            NormalizedUserName = "SMITH@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEK4TAEk6fcvRbaCAbUKJRQ9pSeFIlqPg8D8zEVZVtKg3XWSseIpJZotPNRXv6OL0+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "698c9aa3-80bf-4849-8549-2f6b5955e658",
                            TwoFactorEnabled = false,
                            UserName = "smith@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "jhondoe@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "295e9f45-3258-448a-ad52-1f2d3c6471e2",
                            Email = "jhondoe@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONDOE@ABV.BG",
                            NormalizedUserName = "JHONDOE@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPd6rr9VJzbDNS/MwvuK7zfUig0M1rttJRuIceFOsLjwH8+T3KPhOOnx5QY7x3lmCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02399b9b-3589-4cd6-8010-3c70135aea5e",
                            TwoFactorEnabled = false,
                            UserName = "jhondoe@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "jhonson@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca42a285-10b1-48f1-8e74-73f5f58fa738",
                            Email = "jhonson@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONSON@ABV.BG",
                            NormalizedUserName = "JHONSON@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEI1nVIsW0KKQ+sBEe/deTygv4IG4bGwlkNE7RZ1nvfxnhkuZ0SWwovZCfJgL6BEUGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f5c17ec-e5a6-4895-bfb9-d5fdcf5c83a3",
                            TwoFactorEnabled = false,
                            UserName = "jhonson@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "petrovp@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0051a783-ace2-4bca-ab79-c9b9a5df5e85",
                            Email = "petrovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVP@ABV.BG",
                            NormalizedUserName = "PETROVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPvGcliuzF6CqZWAsI8JxDjRVZDOwROJIJ5s9C8U06xrdORpwh62kVPqsjTnZ7/YdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40604119-2262-4075-b190-a78342d8d7fb",
                            TwoFactorEnabled = false,
                            UserName = "petrovp@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "petrovai@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85399074-f899-41de-a9fb-26afc1dc8daa",
                            Email = "petrovai@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAI@ABV.BG",
                            NormalizedUserName = "PETROVAI@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEDNecbObipUho8zIsyxdDnIahX/lwyyuMDG7c0zv0Igy9EA+mRKX2LJAgAb7LOjazA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c206e57-93c6-4d70-8eb7-3659c251415b",
                            TwoFactorEnabled = false,
                            UserName = "petrovai@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "williams@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc289a26-21ce-4dcc-b7aa-46033a6ca2f7",
                            Email = "williams@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLIAMS@ABV.BG",
                            NormalizedUserName = "WILLIAMS@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEEazYQp/XX8sNbQQEOoZenAfGbzODKht3tqy7/3gPdhrkqj12TunUo4l3INX82jswA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22b97da0-2db2-4353-a6b4-3fe892490229",
                            TwoFactorEnabled = false,
                            UserName = "williams@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "brown@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff8eff20-fcf2-4ad2-8ba8-a8ce2ae6393e",
                            Email = "brown@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BROWN@ABV.BG",
                            NormalizedUserName = "BROWN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEObyKvaBzwsIpWX65LYVh4Emu8/JScOnc7swftj7GJ1UuL/nSduFsfaISWKRao+OLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "597f8369-bda3-4512-bb0c-297195e3fc38",
                            TwoFactorEnabled = false,
                            UserName = "brown@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "ivanovst@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "894d0dbe-31cd-48b7-927a-6978b9d4edaf",
                            Email = "ivanovst@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVST@ABV.BG",
                            NormalizedUserName = "IVANOVST@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEHkB6ZMV1Ya2xkmxcAH/TjaLZ9dBrGzKSEmh6xWRrZbDNTBxF1VjN9ekSeQnBI3/WQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84c596bc-fabf-4713-8142-0ecc659afd4c",
                            TwoFactorEnabled = false,
                            UserName = "ivanovst@abv.bg",
                            UserType = "Manager"
                        },
                        new
                        {
                            Id = "davissophia@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f9bf1c2-fce3-4f5a-9fc1-e953c84bdca8",
                            Email = "davissophia@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVISSOPHIA@ABV.BG",
                            NormalizedUserName = "DAVISSOPHIA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAENR8X1fmcsvLgvajCIEwRAhODwsy8jBV9flCFfn4F96Pm7dnh7EQPBPmhKaBeJFerg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44b02cc6-a4d1-444e-b2de-db1bdeb16115",
                            TwoFactorEnabled = false,
                            UserName = "davissophia@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "miller@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d94641c5-526a-43b9-a5eb-f068bd87a38d",
                            Email = "miller@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MILLER@ABV.BG",
                            NormalizedUserName = "MILLER@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEN40lNvQpI8ExmjomMRdAKq2mHvrzLRcHsVkAdIG9I4xgRpcSFIpUkmh1xKuzyc9Cg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02a4395c-3620-48dd-9286-ea49b5773ab4",
                            TwoFactorEnabled = false,
                            UserName = "miller@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "taylor@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbdc928e-a35b-4989-ad2a-32dfed596261",
                            Email = "taylor@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TAYLOR@ABV.BG",
                            NormalizedUserName = "TAYLOR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAENx6Bqf35cBlxvEzTZBkDeVPZkW19zhLVYF613U0jbWsLMGlLWnkJ2A5sivV1VCNCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "560dcd24-6762-4ce7-8286-3bb8d50ccd49",
                            TwoFactorEnabled = false,
                            UserName = "taylor@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "ivanovivan@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29ae79bb-c821-4a70-ad59-d2a025add68b",
                            Email = "ivanovivan@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVIVAN@ABV.BG",
                            NormalizedUserName = "IVANOVIVAN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPQ3l0UNownx0hNXnPmPBEitE491flGF8rbdOEuAxr2ObHmXKMbjSYSI/zhjIoYbIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a6379cb-1809-486f-b09f-da8f079ce069",
                            TwoFactorEnabled = false,
                            UserName = "ivanovivan@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "stefanovp@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9cd09cb4-e1fd-485b-a907-e845e7974658",
                            Email = "stefanovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANOVP@ABV.BG",
                            NormalizedUserName = "STEFANOVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEGK21ED/9fio32uxhwU7mGEgZ3YrtL0wTVuiAjzqfZim3+h8lHyZfDmCy9iz83ka7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4307473-0d95-4e83-a2f0-fdcd8fbd3124",
                            TwoFactorEnabled = false,
                            UserName = "stefanovp@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "petrovlazar@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65371648-196e-4ecc-be8f-a12fc8ab17a5",
                            Email = "petrovlazar@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVLAZAR@ABV.BG",
                            NormalizedUserName = "PETROVLAZAR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAELJV3d+HCqXlqhowkaIjAO2KIffEjIzfOshEXUGiq+JQA4cUKi/iWcJc3aOt8k4Wfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbb19d71-29e8-403b-a057-c9dd706e75ec",
                            TwoFactorEnabled = false,
                            UserName = "petrovlazar@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "petrovavanya@abv.bg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c52a822f-bcbc-413f-bf87-28812c3a16af",
                            Email = "petrovavanya@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAVANYA@ABV.BG",
                            NormalizedUserName = "PETROVAVANYA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAENzrH81U+/YBtd8ym6knyXeOgCZmvQeEk4Vs/2erlWq4FVn64dM/UrjDA2i+k8QZOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a6a20dc-ea11-45fe-b2c3-d27bb6561b7e",
                            TwoFactorEnabled = false,
                            UserName = "petrovavanya@abv.bg",
                            UserType = "Patient"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the Department");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasComment("Department info");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            IsDeleted = false,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            IsDeleted = false,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            IsDeleted = false,
                            Name = "Internal"
                        },
                        new
                        {
                            Id = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            IsDeleted = false,
                            Name = "Pediatrics"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor`s unique identifier");

                    b.Property<Guid>("DepartmnetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department works the doctor");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Last Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s First Name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Doctor`s monthly salary");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Speciality");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmnetId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors", t =>
                        {
                            t.HasComment("Doctor info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("78429ef3-6e8f-441a-8224-cf9a41152a2c"),
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "smith@abv.bg",
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Smith",
                            Salary = 1200m,
                            Specialty = "Cardiology",
                            UserId = "smith@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("38a0afd0-c8d6-4674-b24a-db1e6861fcc8"),
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "jhondoe@abv.bg",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            Salary = 1000m,
                            Specialty = "Neurology",
                            UserId = "jhondoe@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("a15998c9-52af-4c6b-a032-b135b879e5a7"),
                            DepartmnetId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "jhonson@abv.bg",
                            FirstName = "Sara",
                            IsDeleted = false,
                            LastName = "Johnson",
                            Salary = 1150m,
                            Specialty = "Pediatrics",
                            UserId = "jhonson@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("0b04322a-bab8-41ca-b791-ec1abdd7e8a0"),
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovp@abv.bg",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Petrov",
                            Salary = 2150m,
                            Specialty = "Surgeon",
                            UserId = "petrovp@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("18538144-c4ee-4d7d-b4eb-fd9267ca134f"),
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovai@abv.bg",
                            FirstName = "Ivana",
                            IsDeleted = false,
                            LastName = "Petrova",
                            Salary = 4150m,
                            Specialty = "Surgeon",
                            UserId = "petrovai@abv.bg"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager unique identifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Manager Full Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Manager phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Data for Hospital Manager");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed566f8c-5287-4cb8-8084-04134972e6c9"),
                            EmailAddress = "ivanovst@abv.bg",
                            FullName = "Stoian Ivanov",
                            IsDeleted = false,
                            PhoneNumber = "+359883456789",
                            UserId = "ivanovst@abv.bg"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse unnique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse`s department");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse first name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse last name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Nurse monthly salary");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Nurses", t =>
                        {
                            t.HasComment("Nurse info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5c4962-15bb-4282-bfbf-5a0cd30ba664"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "williams@abv.bg",
                            FirstName = "Emma",
                            IsDeleted = false,
                            LastName = "Williams",
                            Salary = 650m,
                            UserId = "williams@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("0f1babbe-d5db-49b9-9624-47b9d69df236"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "brown@abv.bg",
                            FirstName = "Liam",
                            IsDeleted = false,
                            LastName = "Brown",
                            Salary = 1020m,
                            UserId = "brown@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("af558d53-8adc-45ba-bfdd-1ca9e11e7185"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "davissophia@abv.bg",
                            FirstName = "Sophia",
                            IsDeleted = false,
                            LastName = "Davis",
                            Salary = 670m,
                            UserId = "davissophia@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("c55b3e3f-6604-4bf4-a9c8-014d0c146003"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "miller@abv.bg",
                            FirstName = "Noah",
                            IsDeleted = false,
                            LastName = "Miller",
                            Salary = 640m,
                            UserId = "miller@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("3c8870b2-58cf-4341-8ea1-d024520563d0"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "taylor@abv.bg",
                            FirstName = "Olivia",
                            IsDeleted = false,
                            LastName = "Taylor",
                            Salary = 660m,
                            UserId = "taylor@abv.bg"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of Patient");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Patient address");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department the patient is assigned");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient Personal Citizen Number");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient First Name");

                    b.Property<bool>("HasMedicalInsurance")
                        .HasColumnType("bit")
                        .HasComment("Specify if the patient is insured");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient Last Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient phone number");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room of the patient");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients", t =>
                        {
                            t.HasComment("Patient Info Table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("10d0a6f5-aaf1-4ddd-8f45-b104c7630351"),
                            Address = "Sofi, ul.Rezovo 13, et.2, ap.6",
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EGN = "4810234567",
                            EmailAddress = "ivanovivan@abv.bg",
                            FirstName = "Ivan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            UserId = "ivanovivan@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("5f6c85fc-0b00-4367-9f4f-bfd007d37bfd"),
                            Address = "Sofi, ul.Belomorska, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6212094475",
                            EmailAddress = "stefanovp@abv.bg",
                            FirstName = "Petar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Stefanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "stefanovp@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("9f295abc-1156-4d79-8fed-ebeb5e52f5b9"),
                            Address = "Sofi, bul.Vitosha 123, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6102193476",
                            EmailAddress = "petrovlazar@abv.bg",
                            FirstName = "Lazar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "petrovlazar@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("ea30bbae-2fec-44e7-9308-76acbd9de08d"),
                            Address = "Sofi, bul.Vitosha 3, et.7, ap.16",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "8302198562",
                            EmailAddress = "petrovavanya@abv.bg",
                            FirstName = "Vanya",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrova",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "petrovavanya@abv.bg"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientsDoctors");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "TreatmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("PatientsTreatments");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room unique identifier");

                    b.Property<int>("BedCount")
                        .HasColumnType("int")
                        .HasComment("Room`s beds count");

                    b.Property<Guid>("DepartmnetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department is the room");

                    b.Property<bool>("HasFreeBeds")
                        .HasColumnType("bit")
                        .HasComment("Does room has free beds?");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int")
                        .HasComment("Room Number");

                    b.HasKey("Id");

                    b.HasIndex("DepartmnetId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasComment("Room information table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            BedCount = 1,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = new Guid("fc4cc53a-2a34-4232-b63a-0724783fdfa3"),
                            BedCount = 2,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = new Guid("334c034e-51e8-4956-a6a5-f25ce92bf8fa"),
                            BedCount = 2,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 201
                        },
                        new
                        {
                            Id = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            BedCount = 3,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 202
                        },
                        new
                        {
                            Id = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            BedCount = 3,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 301
                        },
                        new
                        {
                            Id = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            BedCount = 2,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 302
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Treatment unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Treatments", t =>
                        {
                            t.HasComment("Treatment info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa8269ac-b97b-4495-b142-7df7f5dd675c"),
                            IsDeleted = false,
                            Name = "Physical Therapy",
                            Price = 100.0m
                        },
                        new
                        {
                            Id = new Guid("89c48d24-281a-461d-ae13-78052f9f38b1"),
                            IsDeleted = false,
                            Name = "Massage Therapy",
                            Price = 80.0m
                        },
                        new
                        {
                            Id = new Guid("546795b1-d788-4b83-8a9f-86b4e41dffa8"),
                            IsDeleted = false,
                            Name = "Chiropractic Adjustment",
                            Price = 120.0m
                        },
                        new
                        {
                            Id = new Guid("c8e9e8aa-b891-4c31-8538-a39244fb262d"),
                            IsDeleted = false,
                            Name = "Manual therapy",
                            Price = 170.0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("DepartmentDoctors")
                        .HasForeignKey("DepartmnetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Managers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Nurses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Room", "Room")
                        .WithMany("Patients")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("Doctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("PatientTreatments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Treatment", "Treatment")
                        .WithMany("Patients")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmnetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Managers");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Navigation("DepartmentDoctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Navigation("DoctorPatients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("PatientTreatments");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
