// <auto-generated />
using System;
using HospitalManagmentApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalManagmentApp.Data.Migrations
{
    [DbContext(typeof(HMDbContext))]
    [Migration("20241210221752_SeedNewPatients")]
    partial class SeedNewPatients
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "78429ef3-6e8f-441a-8224-cf9a41152a2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95b173a3-349b-4f25-906b-a8d9fa61fd68",
                            Email = "smith@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SMITH@ABV.BG",
                            NormalizedUserName = "SMITH@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWhPahwQlmKV4R61LfGPcxKj3Qc6w0CQ0UqVgo9B8C39qBAD+nZDSnUpoKXyvaAcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6213749c-0df0-4c9d-b916-42545afd07b3",
                            TwoFactorEnabled = false,
                            UserName = "smith@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "225c9314-81a7-4050-a6b5-167d17b13213",
                            Email = "jhondoe@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONDOE@ABV.BG",
                            NormalizedUserName = "JHONDOE@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEBFA+z9gvyHf1lAio28f1iQTST5H652YEpgQOjFoQEMsjLI55HdTM/QNlIim/UUDXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c68ccff-a8f9-42b0-9cda-50dd1293c74b",
                            TwoFactorEnabled = false,
                            UserName = "jhondoe@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "a15998c9-52af-4c6b-a032-b135b879e5a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a735b6f-90b4-4527-bb44-a233fbcbb375",
                            Email = "jhonson@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONSON@ABV.BG",
                            NormalizedUserName = "JHONSON@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEB/SdSIRTrh5NNpWFvDtX9OEz2DX4c6EmfmstSu2LxrqWGwn+zPkUcybBSyJzEwHQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca868bb9-c1da-4717-b093-d2cade33b957",
                            TwoFactorEnabled = false,
                            UserName = "jhonson@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16827408-8d9b-43c1-a92e-b4167d8978ce",
                            Email = "petrovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVP@ABV.BG",
                            NormalizedUserName = "PETROVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgTX0O/PbinuJRsjkJq/YQitd7wN8uDqRWvQZYmXrCLJpIL4/24sibNSFsDZyNy7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc57c26e-5664-4488-b13a-52a8ba884d2f",
                            TwoFactorEnabled = false,
                            UserName = "petrovp@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "18538144-c4ee-4d7d-b4eb-fd9267ca134f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb80280b-ab2f-4023-985e-98a85cbc5b6c",
                            Email = "petrovai@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAI@ABV.BG",
                            NormalizedUserName = "PETROVAI@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEBZ4j/RJEaitYtmfFvQEsMS/xIA5NkZTlpKNVJSPFK0zsSBT43hAl4UOcdDaRfo6ww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc845503-fe48-4b37-8ffd-5deac41d7c5d",
                            TwoFactorEnabled = false,
                            UserName = "petrovai@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "c6e29719-7856-4b5f-b5da-84ed3a292877",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2bccb28-a55d-4bb4-8499-c658f83ab9ce",
                            Email = "slaveykir@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEN0OpSVFKZZrOlDUkNDjBXHl4glgCnXXzEBbFH2isOR3OYWZeVC4uCYvM7bKEX5lCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc211e28-2d06-4cce-8fff-c617b364fbc7",
                            TwoFactorEnabled = false,
                            UserName = "slaveykir@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "57e1941c-1412-4384-b819-d67a19204baf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07112671-5c22-4318-9c7c-d1468e0b5fb3",
                            Email = "angelovz@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJgVQt4IpZRfcV8BWtNnXNhOPy4cIlV2kIDreNZCKuFNABWQurVOhAs2uJyxAz9IZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d453d4ea-5b6c-4d34-a252-0fb7f4042d5a",
                            TwoFactorEnabled = false,
                            UserName = "angelovz@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "fddefbf4-e1a5-42a1-a64d-e0843640267c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01e835a3-a579-4518-8d33-192d0fabddeb",
                            Email = "atanasovao@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJhVHG0DQQVhkzAkl8UzCv54DDzptoueXeaobZ4oJ8FQL8Zd3DGwdCQjvOVsm90lYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2b91d0a-c584-40b4-98e1-dffe0a058f64",
                            TwoFactorEnabled = false,
                            UserName = "atanasovao@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d61d8370-8201-4494-b390-f3218f73a947",
                            Email = "williams@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLIAMS@ABV.BG",
                            NormalizedUserName = "WILLIAMS@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEFxnE2Ll2NqgrJzITWOaw4runsmLbi9BtUQBTsDZurFO+dFJTGJnw6mXSu1j55sVPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37b3b2b7-df62-4ec0-9cb9-7624606c2c5b",
                            TwoFactorEnabled = false,
                            UserName = "williams@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "0f1babbe-d5db-49b9-9624-47b9d69df236",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d54bd571-b1e0-46c2-b04e-1d0354b25cf0",
                            Email = "brown@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BROWN@ABV.BG",
                            NormalizedUserName = "BROWN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEBptmjTF4l74Erdf/85lxJtYR2RDDDNvGId0IS9IQqSaAQ8LX4oeMVUf7ihHqRxmfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "606c1726-5f8d-4a3e-a98d-243a091b9577",
                            TwoFactorEnabled = false,
                            UserName = "brown@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "06ea23a1-095e-475f-937e-cb3e34c4def2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3e46271-bf2e-41a1-86c3-50bd1578d177",
                            Email = "ivanovst@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVST@ABV.BG",
                            NormalizedUserName = "IVANOVST@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpLGxm/hOPzo/q230lQgRP4d2Ghgp17HYNhZ+SkDMF7lbDcNrfbeInHr1OPRGWr9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf306d79-31ab-4873-adec-6990837680f9",
                            TwoFactorEnabled = false,
                            UserName = "ivanovst@abv.bg",
                            UserType = "Manager"
                        },
                        new
                        {
                            Id = "af558d53-8adc-45ba-bfdd-1ca9e11e7185",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4e40d01-6f57-4c58-96ad-1d9bfd26159c",
                            Email = "davissophia@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVISSOPHIA@ABV.BG",
                            NormalizedUserName = "DAVISSOPHIA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAofZQOn/AQgy2JfSsTGM2CM8zx/uWKr04cmdO4jRLyS04ocK9uG+hUuflH1CadFfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "960ae795-aa67-4cbb-a54a-ad941fe2ba60",
                            TwoFactorEnabled = false,
                            UserName = "davissophia@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "c55b3e3f-6604-4bf4-a9c8-014d0c146003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59b77b54-58dd-493c-b770-7e398f8619fb",
                            Email = "miller@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MILLER@ABV.BG",
                            NormalizedUserName = "MILLER@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAdiH7HcnVXwEQ9l5G+k/CCfcHUdopGBWjm2OucBIKvfz3FuESkkN2FqxBQcRvUIAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bff0f7d-29f1-476c-a8d1-412ac0ee013b",
                            TwoFactorEnabled = false,
                            UserName = "miller@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "3c8870b2-58cf-4341-8ea1-d024520563d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48386e51-228e-483b-acee-2eab774fe0e7",
                            Email = "taylor@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TAYLOR@ABV.BG",
                            NormalizedUserName = "TAYLOR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEA03XTAVQM4+244UW/IAGOlMz5DDlQdHChtBqeSZxU7SgZg5uxxriQ7yz7eI5VX96g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44dddea4-c650-47bf-a85f-5c9f6d4737bf",
                            TwoFactorEnabled = false,
                            UserName = "taylor@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "7c032bc0-04e2-4111-bbfb-a59d46791529",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9d48853-9e4b-41c8-8cce-16c9a0dd8c5f",
                            Email = "taskovao@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKwSzqKhCRE+JCC2LpivgHP4cn/aJyEy7nt+nP+s4vswHrrse0a5uOOZBhNfQNSeEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b577f5f3-368f-4161-abb2-27d0b679b3b9",
                            TwoFactorEnabled = false,
                            UserName = "taskovao@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "23fbee5b-fbe0-49a4-b312-6a5471f79dca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "921bbe69-31ed-45f0-aa78-56999bf7a9e7",
                            Email = "nikolovapa@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPq26R4Um7k4xTkrr2qtIjQ9iA08V2KnMMWU+p1n2AuLGlZx46Z0mAYh8q/ULDKT/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ecdea6be-6067-4875-a015-f231280c7566",
                            TwoFactorEnabled = false,
                            UserName = "nikolovapa@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "17e9933d-2a1b-467b-b6a2-79297246b8b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d01a698-81a4-493c-a1b8-b0d176fbef2e",
                            Email = "ivanovivan@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVIVAN@ABV.BG",
                            NormalizedUserName = "IVANOVIVAN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEELrSB9HEydndf9p6mYMb3xu0oho5i9p0yW0X7Ep6AAhgKLPTNBowHZrtuSDgLSvqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6014502f-5cc6-4724-9f26-62127d12bf15",
                            TwoFactorEnabled = false,
                            UserName = "ivanovivan@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88085572-6e77-4a5f-97ab-92190c96f312",
                            Email = "stefanovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANOVP@ABV.BG",
                            NormalizedUserName = "STEFANOVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEMFw5JBGMnkOXxU3XK+xIIPhlgnjaV0Hd/rv7tJ6hi9asvP7J3O6dTEJbY/aDgCMUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6affb371-d6cd-4438-92d0-1439e8e38383",
                            TwoFactorEnabled = false,
                            UserName = "stefanovp@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "621fb5c5-b634-405d-951b-3088891c3d5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46a8c3b2-6eee-4c4b-8e44-5fc5084abd83",
                            Email = "petrovlazar@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVLAZAR@ABV.BG",
                            NormalizedUserName = "PETROVLAZAR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEDPOkqVkdLuC9iqyrsUV5f/op0kcuLQKIUdReHdoq2nrSaoxkNm0/g/mlYBCSKpI+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f428c607-4261-4f74-ab5f-b56aee9ad585",
                            TwoFactorEnabled = false,
                            UserName = "petrovlazar@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "dd5538d3-1f68-412f-9949-94edde16d8a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f65ce1d-30ad-4946-9b75-713c706418a9",
                            Email = "petrovavanya@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAVANYA@ABV.BG",
                            NormalizedUserName = "PETROVAVANYA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQRZFXUZxG7i8U77LDQ2kzDWk49IoaPK9RZnbEDZT/H0McE4xVViMCrEmhGMhvBHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cfc4bdd-9873-423c-b24e-151143f9009a",
                            TwoFactorEnabled = false,
                            UserName = "petrovavanya@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "a001bd24-5c2a-4f7a-b000-5f7bd233cd12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1d02ae2-07c3-4c5b-8c7d-faa3cf43870e",
                            Email = "james.anderson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAO9hduPdWqM/aEarIlnG+7NVNNXXAZHbXmHGYlbuDGn20wT5tpRVZTrYQ2s7KnXLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21a72e4d-127a-4bf2-ab78-4784414be6a3",
                            TwoFactorEnabled = false,
                            UserName = "james.anderson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "134d8ce3-4c26-434a-90b4-f59ae5457a01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9645afe-6e21-4876-8f2d-15929df93767",
                            Email = "mary.johnson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEC0FfnqguSAnrPK7tgPFktbvdzWx46N6yMK23390/SKe1HSkRNzWmTfGKNuI1mGbrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73e8026f-f6eb-431d-9efc-daa3c5dad2eb",
                            TwoFactorEnabled = false,
                            UserName = "mary.johnson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "17139a72-76d4-4362-aa27-18a64cc8d285",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91411f64-0a7f-4a98-966d-967fceff5698",
                            Email = "robert.williams@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEhjYuLFwWPGhrosrNE1Gie1QLoHB1QBYkUNQxnsHrKGNEVT/lNAH+iJ99UaXr/gjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85059e91-e66e-4d5d-8183-43cf80eb9611",
                            TwoFactorEnabled = false,
                            UserName = "robert.williams@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "15050ff2-ed6c-475f-8831-f61d54a29175",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "379e44e1-ddf1-41c9-8355-32b949c4fd4d",
                            Email = "patricia.brown@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAk0U1jFqljVfsWD2UCHRq5SjjCCJpafEdNxpU+Lh8psKNc3TbeQF87pRYuWyL3kUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10afb9d0-2e62-489d-a389-341e9696820e",
                            TwoFactorEnabled = false,
                            UserName = "patricia.brown@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "76222e29-cbf5-4335-b2e4-fa6a77afeab1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cd1236e-99fd-438b-9aea-7bceadc4a2c2",
                            Email = "jennifer.miller@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHaNakpEPnzexKGHPzqa+LLa2Gjwdv50K+YXNTCXG38ZIAOurj7iJzjzBQZ/oAbRuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a66865bc-a507-4334-abbd-b62683c0ed8c",
                            TwoFactorEnabled = false,
                            UserName = "jennifer.miller@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "3110d510-2d4d-4e84-9f69-84794965586d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a586e3d3-37fd-413d-9ae4-8403e7f88a6a",
                            Email = "michael.wilson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPzoZSUlVUrjRoi5YoljSE36L6pgYs8FZzbBRNOv3kp5Zg+1Zs0OP2Hfc2j5nmmGaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5ebc964-0765-40cf-86cd-d7f02dbeb2e7",
                            TwoFactorEnabled = false,
                            UserName = "michael.wilson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "d8d0d177-60a0-4925-b4ed-bb36aebb48c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bca4f798-ae60-4c92-afe1-1a9e4bfe2d8a",
                            Email = "elizabeth.moore@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDksdzXgUew+f7M7e1ZYZnIozn+DHV15Bnbh6zSoDh+bL1GuKS1tU2k/kqJtp2NDSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32eb45e5-01c8-45cb-9cdd-5ff9230c7369",
                            TwoFactorEnabled = false,
                            UserName = "elizabeth.moore@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "82c99b5d-6573-4514-81eb-183ace313419",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63e96eb7-10a5-4ca5-903b-b32c402e6a9a",
                            Email = "david.taylor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAPjbPIj2jhgMAcs2hWCtvSWJy90W2uLrunsiSx9EcCIvUN/OhQC49xwxx6INptiNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "673d43d8-cafa-40d5-b129-4ed7f4ce418c",
                            TwoFactorEnabled = false,
                            UserName = "david.taylor@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "a8d287e8-357a-40f3-893a-ed507ed6a85d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17918b66-9912-489f-b626-5e6b7cb16c8a",
                            Email = "susan.anderson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDtDesbCC4Uy+8KtxT1yHykx8LK+NBIeqWVvWkWNruoSARVBFqFbgdGOqZ/yX8reeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94f6c689-09a1-4a22-bbb8-691040a2f5c6",
                            TwoFactorEnabled = false,
                            UserName = "susan.anderson@example.com",
                            UserType = "Patient"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the Department");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasComment("Department info");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            IsDeleted = false,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            IsDeleted = false,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            IsDeleted = false,
                            Name = "Internal"
                        },
                        new
                        {
                            Id = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            IsDeleted = false,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            IsDeleted = false,
                            Name = "Oncology"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor`s unique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department works the doctor");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Last Name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Doctor`s monthly salary");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Speciality");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors", t =>
                        {
                            t.HasComment("Doctor info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("78429ef3-6e8f-441a-8224-cf9a41152a2c"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "smith@abv.bg",
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Smith",
                            Salary = 1200m,
                            Specialty = "Cardiology",
                            UserId = "78429ef3-6e8f-441a-8224-cf9a41152a2c"
                        },
                        new
                        {
                            Id = new Guid("38a0afd0-c8d6-4674-b24a-db1e6861fcc8"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "jhondoe@abv.bg",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            Salary = 1000m,
                            Specialty = "Neurology",
                            UserId = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8"
                        },
                        new
                        {
                            Id = new Guid("a15998c9-52af-4c6b-a032-b135b879e5a7"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "jhonson@abv.bg",
                            FirstName = "Sara",
                            IsDeleted = false,
                            LastName = "Johnson",
                            Salary = 1150m,
                            Specialty = "Pediatrics",
                            UserId = "a15998c9-52af-4c6b-a032-b135b879e5a7"
                        },
                        new
                        {
                            Id = new Guid("0b04322a-bab8-41ca-b791-ec1abdd7e8a0"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovp@abv.bg",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Petrov",
                            Salary = 2150m,
                            Specialty = "Surgeon",
                            UserId = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0"
                        },
                        new
                        {
                            Id = new Guid("18538144-c4ee-4d7d-b4eb-fd9267ca134f"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovai@abv.bg",
                            FirstName = "Ivana",
                            IsDeleted = false,
                            LastName = "Petrova",
                            Salary = 4150m,
                            Specialty = "Surgeon",
                            UserId = "18538144-c4ee-4d7d-b4eb-fd9267ca134f"
                        },
                        new
                        {
                            Id = new Guid("c6e29719-7856-4b5f-b5da-84ed3a292877"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "slaveykir@abv.bg",
                            FirstName = "Slavey",
                            IsDeleted = false,
                            LastName = "Kirilov",
                            Salary = 6150m,
                            Specialty = "Oncologyst",
                            UserId = "c6e29719-7856-4b5f-b5da-84ed3a292877"
                        },
                        new
                        {
                            Id = new Guid("57e1941c-1412-4384-b819-d67a19204baf"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "angelovz@abv.bg",
                            FirstName = "Zhoro",
                            IsDeleted = false,
                            LastName = "Angelov",
                            Salary = 3750m,
                            Specialty = "Oncologyst",
                            UserId = "57e1941c-1412-4384-b819-d67a19204baf"
                        },
                        new
                        {
                            Id = new Guid("fddefbf4-e1a5-42a1-a64d-e0843640267c"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "atanasovao@abv.bg",
                            FirstName = "Olya",
                            IsDeleted = false,
                            LastName = "Atanasova",
                            Salary = 3250m,
                            Specialty = "Oncologyst",
                            UserId = "fddefbf4-e1a5-42a1-a64d-e0843640267c"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager unique identifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Manager Full Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Manager phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Data for Hospital Manager");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("06ea23a1-095e-475f-937e-cb3e34c4def2"),
                            EmailAddress = "ivanovst@abv.bg",
                            FullName = "Stoian Ivanov",
                            IsDeleted = false,
                            PhoneNumber = "+359883456789",
                            UserId = "06ea23a1-095e-475f-937e-cb3e34c4def2"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse unnique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse`s department");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse first name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse last name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Nurse monthly salary");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Nurses", t =>
                        {
                            t.HasComment("Nurse info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5c4962-15bb-4282-bfbf-5a0cd30ba664"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "williams@abv.bg",
                            FirstName = "Emma",
                            IsDeleted = false,
                            LastName = "Williams",
                            Salary = 650m,
                            UserId = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664"
                        },
                        new
                        {
                            Id = new Guid("0f1babbe-d5db-49b9-9624-47b9d69df236"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "brown@abv.bg",
                            FirstName = "Liam",
                            IsDeleted = false,
                            LastName = "Brown",
                            Salary = 1020m,
                            UserId = "0f1babbe-d5db-49b9-9624-47b9d69df236"
                        },
                        new
                        {
                            Id = new Guid("af558d53-8adc-45ba-bfdd-1ca9e11e7185"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "davissophia@abv.bg",
                            FirstName = "Sophia",
                            IsDeleted = false,
                            LastName = "Davis",
                            Salary = 670m,
                            UserId = "af558d53-8adc-45ba-bfdd-1ca9e11e7185"
                        },
                        new
                        {
                            Id = new Guid("c55b3e3f-6604-4bf4-a9c8-014d0c146003"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "miller@abv.bg",
                            FirstName = "Noah",
                            IsDeleted = false,
                            LastName = "Miller",
                            Salary = 640m,
                            UserId = "c55b3e3f-6604-4bf4-a9c8-014d0c146003"
                        },
                        new
                        {
                            Id = new Guid("3c8870b2-58cf-4341-8ea1-d024520563d0"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "taylor@abv.bg",
                            FirstName = "Olivia",
                            IsDeleted = false,
                            LastName = "Taylor",
                            Salary = 660m,
                            UserId = "3c8870b2-58cf-4341-8ea1-d024520563d0"
                        },
                        new
                        {
                            Id = new Guid("7c032bc0-04e2-4111-bbfb-a59d46791529"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "taskovao@abv.bg",
                            FirstName = "Olga",
                            IsDeleted = false,
                            LastName = "Taskova",
                            Salary = 680m,
                            UserId = "7c032bc0-04e2-4111-bbfb-a59d46791529"
                        },
                        new
                        {
                            Id = new Guid("23fbee5b-fbe0-49a4-b312-6a5471f79dca"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "nikolovapa@abv.bg",
                            FirstName = "Paola",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            Salary = 680m,
                            UserId = "23fbee5b-fbe0-49a4-b312-6a5471f79dca"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of Patient");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Patient address");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department the patient is assigned");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient Personal Citizen Number");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient First Name");

                    b.Property<bool>("HasMedicalInsurance")
                        .HasColumnType("bit")
                        .HasComment("Specify if the patient is insured");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient Last Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient phone number");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room of the patient");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients", t =>
                        {
                            t.HasComment("Patient Info Table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("45ff5a3c-c27e-4e62-8c90-4954281d46d0"),
                            Address = "Sofi, ul.Rezovo 13, et.2, ap.6",
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EGN = "4810234567",
                            EmailAddress = "ivanovivan@abv.bg",
                            FirstName = "Ivan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            UserId = "45ff5a3c-c27e-4e62-8c90-4954281d46d0"
                        },
                        new
                        {
                            Id = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            Address = "Sofi, ul.Belomorska, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6212094475",
                            EmailAddress = "stefanovp@abv.bg",
                            FirstName = "Petar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Stefanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415"
                        },
                        new
                        {
                            Id = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            Address = "Sofi, bul.Vitosha 123, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6102193476",
                            EmailAddress = "petrovlazar@abv.bg",
                            FirstName = "Lazar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "621fb5c5-b634-405d-951b-3088891c3d5c"
                        },
                        new
                        {
                            Id = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            Address = "Sofi, bul.Vitosha 3, et.7, ap.16",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "8302198562",
                            EmailAddress = "petrovavanya@abv.bg",
                            FirstName = "Vanya",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrova",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "dd5538d3-1f68-412f-9949-94edde16d8a2"
                        },
                        new
                        {
                            Id = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            Address = "Sofi, ul.Rezovo 13, et.2, ap.6",
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EGN = "4810234567",
                            EmailAddress = "ivanovivan@abv.bg",
                            FirstName = "Ivan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            UserId = "17e9933d-2a1b-467b-b6a2-79297246b8b3"
                        },
                        new
                        {
                            Id = new Guid("a001bd24-5c2a-4f7a-b000-5f7bd233cd12"),
                            Address = "123 Elm Street",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "1234567890",
                            EmailAddress = "james.anderson@example.com",
                            FirstName = "James",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Anderson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            UserId = "a001bd24-5c2a-4f7a-b000-5f7bd233cd12"
                        },
                        new
                        {
                            Id = new Guid("134d8ce3-4c26-434a-90b4-f59ae5457a01"),
                            Address = "456 Maple Avenue",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "2345678901",
                            EmailAddress = "mary.johnson@example.com",
                            FirstName = "Mary",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Johnson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            UserId = "134d8ce3-4c26-434a-90b4-f59ae5457a01"
                        },
                        new
                        {
                            Id = new Guid("17139a72-76d4-4362-aa27-18a64cc8d285"),
                            Address = "789 Oak Boulevard",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "3456789012",
                            EmailAddress = "robert.williams@example.com",
                            FirstName = "Robert",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Williams",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "17139a72-76d4-4362-aa27-18a64cc8d285"
                        },
                        new
                        {
                            Id = new Guid("15050ff2-ed6c-475f-8831-f61d54a29175"),
                            Address = "321 Pine Lane",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "4567890123",
                            EmailAddress = "patricia.brown@example.com",
                            FirstName = "Patricia",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Brown",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "15050ff2-ed6c-475f-8831-f61d54a29175"
                        },
                        new
                        {
                            Id = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            Address = "987 Birch Road",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "6789012345",
                            EmailAddress = "jennifer.miller@example.com",
                            FirstName = "Jennifer",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Miller",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "76222e29-cbf5-4335-b2e4-fa6a77afeab1"
                        },
                        new
                        {
                            Id = new Guid("3110d510-2d4d-4e84-9f69-84794965586d"),
                            Address = "159 Walnut Avenue",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "7890123456",
                            EmailAddress = "michael.wilson@example.com",
                            FirstName = "Michael",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Wilson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "3110d510-2d4d-4e84-9f69-84794965586d"
                        },
                        new
                        {
                            Id = new Guid("d8d0d177-60a0-4925-b4ed-bb36aebb48c4"),
                            Address = "159 Walnut Avenue",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "8901234567",
                            EmailAddress = "elizabeth.moore@example.com",
                            FirstName = "Elizabeth",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Moore",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "d8d0d177-60a0-4925-b4ed-bb36aebb48c4"
                        },
                        new
                        {
                            Id = new Guid("82c99b5d-6573-4514-81eb-183ace313419"),
                            Address = "159 Walnut Avenue",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "9012345678",
                            EmailAddress = "david.taylor@example.com",
                            FirstName = "David",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Moore",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "82c99b5d-6573-4514-81eb-183ace313419"
                        },
                        new
                        {
                            Id = new Guid("a8d287e8-357a-40f3-893a-ed507ed6a85d"),
                            Address = "123 Elm Court",
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EGN = "0123456789",
                            EmailAddress = "susan.anderson@example.com",
                            FirstName = "Susan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Anderson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("994355a8-add4-4d49-a52f-f610e4cb6893"),
                            UserId = "a8d287e8-357a-40f3-893a-ed507ed6a85d"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientsDoctors");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "TreatmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("PatientsTreatments");

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909")
                        },
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2")
                        },
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            TreatmentId = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2")
                        },
                        new
                        {
                            PatientId = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            TreatmentId = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("39bf20f4-81c8-4cd6-9262-61184c8d6b9a")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909")
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room unique identifier");

                    b.Property<int>("BedCount")
                        .HasColumnType("int")
                        .HasComment("Room`s beds count");

                    b.Property<Guid>("DepartmnetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department is the room");

                    b.Property<bool>("HasFreeBeds")
                        .HasColumnType("bit")
                        .HasComment("Does room has free beds?");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int")
                        .HasComment("Room Number");

                    b.HasKey("Id");

                    b.HasIndex("DepartmnetId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasComment("Room information table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            BedCount = 1,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = new Guid("fc4cc53a-2a34-4232-b63a-0724783fdfa3"),
                            BedCount = 2,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = new Guid("334c034e-51e8-4956-a6a5-f25ce92bf8fa"),
                            BedCount = 2,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 201
                        },
                        new
                        {
                            Id = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            BedCount = 3,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 202
                        },
                        new
                        {
                            Id = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            BedCount = 3,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 301
                        },
                        new
                        {
                            Id = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            BedCount = 2,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 302
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Treatment unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Treatments", t =>
                        {
                            t.HasComment("Treatment info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667"),
                            IsDeleted = false,
                            Name = "Manual Therapy",
                            Price = 100.0m
                        },
                        new
                        {
                            Id = new Guid("39bf20f4-81c8-4cd6-9262-61184c8d6b9a"),
                            IsDeleted = false,
                            Name = "Massage Therapy",
                            Price = 80.0m
                        },
                        new
                        {
                            Id = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909"),
                            IsDeleted = false,
                            Name = "Chiropractic Adjustment",
                            Price = 120.0m
                        },
                        new
                        {
                            Id = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2"),
                            IsDeleted = false,
                            Name = "Dialysis",
                            Price = 170.0m
                        },
                        new
                        {
                            Id = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0"),
                            IsDeleted = false,
                            Name = "Physical Therapy",
                            Price = 200.0m
                        },
                        new
                        {
                            Id = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c"),
                            IsDeleted = false,
                            Name = "Vaccination",
                            Price = 20.0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("DepartmentDoctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Managers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Nurses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Room", "Room")
                        .WithMany("Patients")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("Doctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("PatientTreatments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Treatment", "Treatment")
                        .WithMany("Patients")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmnetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Managers");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Navigation("DepartmentDoctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Navigation("DoctorPatients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("PatientTreatments");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
