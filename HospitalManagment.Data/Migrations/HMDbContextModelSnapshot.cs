// <auto-generated />
using System;
using HospitalManagmentApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalManagmentApp.Data.Migrations
{
    [DbContext(typeof(HMDbContext))]
    partial class HMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "78429ef3-6e8f-441a-8224-cf9a41152a2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55004615-a158-49d3-ac94-46ac394be36d",
                            Email = "smith@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SMITH@ABV.BG",
                            NormalizedUserName = "SMITH@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1d7MySe+U2HUwr2ha6nbiZXxya5stlmUh0zNrzeVTTlzydIoYfivB1EwDrr0zsxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca865acc-92c2-4fe5-b985-3cea83232040",
                            TwoFactorEnabled = false,
                            UserName = "smith@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21106461-a315-47cb-be5f-be9095f27ea3",
                            Email = "jhondoe@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONDOE@ABV.BG",
                            NormalizedUserName = "JHONDOE@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEHzNfEHOaLRpqKAvkzO5HlN1GLwOzfpo1e66rw5WnGXcGJw+IvqJ+G+n8kueVDBlyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91910509-c460-409f-9b60-c1a246a416b8",
                            TwoFactorEnabled = false,
                            UserName = "jhondoe@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "a15998c9-52af-4c6b-a032-b135b879e5a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07095467-217d-43d1-9924-7c4a6c672164",
                            Email = "jhonson@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONSON@ABV.BG",
                            NormalizedUserName = "JHONSON@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEJe/GdaPPKmRZ+pKZKEdn7DSBy6YlvqwKlzMdxS7ty0i7r2lnXGsHKTNj4UWRwWgiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c141b24-2ba8-4604-b25c-5b02480863ea",
                            TwoFactorEnabled = false,
                            UserName = "jhonson@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "073c81bb-0fc2-40cf-821f-b9e23a3a2c4d",
                            Email = "petrovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVP@ABV.BG",
                            NormalizedUserName = "PETROVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEFoKMGvS63xDQZjQQ946CvIHYv065DUUbwo+sk5Vl+WlCrOKMzLgfnkUQ08g+yG0Ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1e1fd02-9408-42ba-99a4-8008a63d3616",
                            TwoFactorEnabled = false,
                            UserName = "petrovp@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "18538144-c4ee-4d7d-b4eb-fd9267ca134f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70fc9769-9cc2-43b9-b8bb-9b7f3183cca2",
                            Email = "petrovai@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAI@ABV.BG",
                            NormalizedUserName = "PETROVAI@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEGymEHdATGxTlBz/kxe7utqLM7J+/Vdzq+4ioS/cQpIdACM/1Hdoo20miKxuhNpR0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "390993a0-5d73-4b60-b968-802a87c39fe1",
                            TwoFactorEnabled = false,
                            UserName = "petrovai@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "c6e29719-7856-4b5f-b5da-84ed3a292877",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b7da226-da41-41f1-81df-3566fa4ebf7e",
                            Email = "slaveykir@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SLAVEYKIR@ABV.BG",
                            NormalizedUserName = "SLAVEYKIR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEO+NNjzrxdrKBZEcLs7eZcpx02rre/GrUhiwQ1qkPO1PFWRkcFqU+Wb9KgJg2jbtGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdb33106-4b50-41b9-8a0f-7f38eb5f5cc3",
                            TwoFactorEnabled = false,
                            UserName = "slaveykir@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "57e1941c-1412-4384-b819-d67a19204baf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "396601e1-4f3e-457c-bb5e-d84823782a19",
                            Email = "angelovz@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGELOVZ@ABV.BG",
                            NormalizedUserName = "ANGELOVZ@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEDNiUgw0VRxKuD45MMQpcisKndIhs/NixkkSLZ5g7ECVbH42ACgo2SJwKORmc6GjjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1a30c54-35ee-4934-9803-a642643bf1a8",
                            TwoFactorEnabled = false,
                            UserName = "angelovz@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "fddefbf4-e1a5-42a1-a64d-e0843640267c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0212367d-65e2-4417-850a-cc133e42ffef",
                            Email = "atanasovao@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ATANASOVAO@ABV.BG",
                            NormalizedUserName = "ATANASOVAO@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAELrzRmQF64jaNeK0YMU6NMVARo45482oKEDKcO+rZ4Se4Wqu0aiPZF1C9WFKZQx62A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80d1d420-bbe9-4e4b-bcf1-ff8e1c409849",
                            TwoFactorEnabled = false,
                            UserName = "atanasovao@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d6837c3-d43c-440f-9e95-a1b2d17f59db",
                            Email = "williams@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLIAMS@ABV.BG",
                            NormalizedUserName = "WILLIAMS@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAENmPt+7oFvvjQrZpbK2/0+FGjuvNAiZ9B3tGkAPADpQoL9OC4szX429K9zAn4CS/JA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c713ce7-88c7-422e-83bf-09b3ac4e2126",
                            TwoFactorEnabled = false,
                            UserName = "williams@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "0f1babbe-d5db-49b9-9624-47b9d69df236",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e42361d-48bc-42ed-b45b-e400253aafff",
                            Email = "brown@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BROWN@ABV.BG",
                            NormalizedUserName = "BROWN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAN+vWTQ283adQoM1XC9L1+ip8h5UYa0TtbJdNfD/VQKEAAnWQ2o64IzB69CccxOOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75592781-0247-4e96-b251-50340d85e3a7",
                            TwoFactorEnabled = false,
                            UserName = "brown@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "06ea23a1-095e-475f-937e-cb3e34c4def2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9c8e518-ea3c-4a06-ad67-235a2d4c2c2d",
                            Email = "ivanovst@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVST@ABV.BG",
                            NormalizedUserName = "IVANOVST@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEL85ZgzZPrDDLeuM8/sI98XtbgsMZDgJQYljPxDauAmtRBZkd8H4cl2eOSXmc87TsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be8fb048-3b8e-4505-88a8-3d57715c4e3f",
                            TwoFactorEnabled = false,
                            UserName = "ivanovst@abv.bg",
                            UserType = "Manager"
                        },
                        new
                        {
                            Id = "af558d53-8adc-45ba-bfdd-1ca9e11e7185",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "331bb38c-3bb9-474f-ae91-9c1d0e4757b2",
                            Email = "davissophia@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVISSOPHIA@ABV.BG",
                            NormalizedUserName = "DAVISSOPHIA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKvRm7XAH4a247PY8mvuBAoK5GoNh5rW8yy+/l3xJimqwSSNurknCvHjp32wPcTH3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf3a0575-f0f5-4a9d-be10-96ede43f3a0a",
                            TwoFactorEnabled = false,
                            UserName = "davissophia@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "c55b3e3f-6604-4bf4-a9c8-014d0c146003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "700966d2-6b30-4cd1-a580-6eca6586eecc",
                            Email = "miller@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MILLER@ABV.BG",
                            NormalizedUserName = "MILLER@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEGfOUIkYBN7ALkHlXz+OrhBcmb9aPlITXzyUceCsIN9caJ2uP8oX95MDZvPKhZgVKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "770ff2ae-5279-4142-8937-87d6947ab353",
                            TwoFactorEnabled = false,
                            UserName = "miller@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "3c8870b2-58cf-4341-8ea1-d024520563d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ecc514c-8843-4df1-a60e-e1c1afef1f6c",
                            Email = "taylor@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TAYLOR@ABV.BG",
                            NormalizedUserName = "TAYLOR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAENNh+jbsGfByGroWKAnOITbEypj86uM6fn77Z3auwJLF3jYn5okupGYr0z+2u3eCeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89d8895e-1526-4812-a5f8-c85edd2e08a6",
                            TwoFactorEnabled = false,
                            UserName = "taylor@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "7c032bc0-04e2-4111-bbfb-a59d46791529",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f0c96c1-6faa-478d-b39c-1560e2130f55",
                            Email = "taskovao@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TASKOVAO@ABV.BG",
                            NormalizedUserName = "TASKOVAO@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEFV959RRYhvg7Ll/umRFIYzYS0xAiPTHdspNY+YN0as0qKWWwonivYkIj1bWFM9HvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "196f7c47-3ae2-4e87-9239-258e20a213ee",
                            TwoFactorEnabled = false,
                            UserName = "taskovao@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "23fbee5b-fbe0-49a4-b312-6a5471f79dca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ffd743c-4f9b-44ca-95ce-4b4811433972",
                            Email = "nikolovapa@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLOVAPA@ABV.BG",
                            NormalizedUserName = "NIKOLOVAPA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKRZEMs7TnwJlRzEC2UfWfYgDv8V4vGSHFDHHvwF8sKJXqD4t/vLj7Zkt6RO2od2mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b6f882a-d068-45d9-8e16-f90c5bdf17db",
                            TwoFactorEnabled = false,
                            UserName = "nikolovapa@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "17e9933d-2a1b-467b-b6a2-79297246b8b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73bca0b4-e204-4022-9bf1-b020ef56f90c",
                            Email = "ivanovivan@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVIVAN@ABV.BG",
                            NormalizedUserName = "IVANOVIVAN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEExAEy2faSU87NQ+UvKLMjaqzrxnJS1uXN5X8xVJED40rG1S6Cb1KRZ73ev6Plj/TA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee9ec2a9-d8e9-4a6e-95e1-3922d4fbfbeb",
                            TwoFactorEnabled = false,
                            UserName = "ivanovivan@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65779719-e9ec-4ef9-9724-ab69dba38daf",
                            Email = "stefanovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANOVP@ABV.BG",
                            NormalizedUserName = "STEFANOVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEE4ELJVqiH4vqc3GpE1h87wlUvfIUucWYKh4eFrHdUvI9xEgOGGeNrpeO/LT0vaweA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c205b9f8-e3da-41f6-9cee-c2ae2cfc2141",
                            TwoFactorEnabled = false,
                            UserName = "stefanovp@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "621fb5c5-b634-405d-951b-3088891c3d5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fabef8f-2196-40ea-9c3c-4555381e91e2",
                            Email = "petrovlazar@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVLAZAR@ABV.BG",
                            NormalizedUserName = "PETROVLAZAR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEJDKsfzfePby8vukERU6c2B0ZmDTp2Gw6WepvJF8COPgLfM8q+xzYJQGKkdfQiaXKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae0e4d36-f061-4f9b-9c28-565465bd67e5",
                            TwoFactorEnabled = false,
                            UserName = "petrovlazar@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "dd5538d3-1f68-412f-9949-94edde16d8a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "358fe4c6-69c7-4e27-919d-113d7cd0fce4",
                            Email = "petrovavanya@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAVANYA@ABV.BG",
                            NormalizedUserName = "PETROVAVANYA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEGtY6wRQ+KLNv4zrf+TyUD86Um0tPnc/6MBRo4tBzQZxwC/LgUJEDMPa6cNdMe8R+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b32cd278-c032-4153-bf02-98629b1ed2c6",
                            TwoFactorEnabled = false,
                            UserName = "petrovavanya@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "a001bd24-5c2a-4f7a-b000-5f7bd233cd12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09364051-8c73-46ef-b52a-0e77b981df2c",
                            Email = "james.anderson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES.ANDERSON@EXAMPLE.COM",
                            NormalizedUserName = "JAMES.ANDERSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDC/WcRnu/KMmo10kiR4ry+sFIDXLeiLWe0N0/Z0G9Bm8JYlciOhnQi+NGTtHtJ6zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5abee15e-7a1e-4bfb-bea3-e57c834170ad",
                            TwoFactorEnabled = false,
                            UserName = "james.anderson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "134d8ce3-4c26-434a-90b4-f59ae5457a01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32bdc8fb-a7dd-4218-8d77-2287582ace8d",
                            Email = "mary.johnson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARY.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "MARY.JOHNSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECDeot2giZJOJrWhsjueiLquRBOdbvpuOibgMU4rBMYM82lPh2KgRO5UkOE4ZvztwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f916021-6cf3-41ad-8a20-d8f98d713c84",
                            TwoFactorEnabled = false,
                            UserName = "mary.johnson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "17139a72-76d4-4362-aa27-18a64cc8d285",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8cb9fa4a-3d16-4b02-9ffe-f884164ba815",
                            Email = "robert.williams@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROBERT.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "ROBERT.WILLIAMS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENi4i1eP1c1UmDDOgUODlkdfguxAc5QiyR+CoHIdZwvndi5bSFKJ6FLHvREQMbUmxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f859e3f-50ff-4b3e-b405-2fc2966bda1e",
                            TwoFactorEnabled = false,
                            UserName = "robert.williams@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "15050ff2-ed6c-475f-8831-f61d54a29175",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3a99881-8e1a-4ac7-8568-d9dbfed8c15b",
                            Email = "patricia.brown@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATRICIA.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "PATRICIA.BROWN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGglNX63aE4hQ/mSm7EYCoHJCBOrHMLhdLmDQEdyb59k813hUZwrWVm/vQjoUZzIlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55b16cc8-daff-4b94-91cc-2bb555d3a783",
                            TwoFactorEnabled = false,
                            UserName = "patricia.brown@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "76222e29-cbf5-4335-b2e4-fa6a77afeab1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5acb41fa-0cfa-4952-a07d-531689279c4e",
                            Email = "jennifer.miller@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JENNIFER.MILLER@EXAMPLE.COM",
                            NormalizedUserName = "JENNIFER.MILLER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIGhMPphlV0sbadcRZk7qH+8AcvnWttMKWtNpirgKEUnpYUj7aUPEt/RE4HeKpLohw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0acc8b2d-6b8d-45a0-9950-60f8009ad8cb",
                            TwoFactorEnabled = false,
                            UserName = "jennifer.miller@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "3110d510-2d4d-4e84-9f69-84794965586d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fe0a305-5193-4d31-98ad-33b6a39667ca",
                            Email = "michael.wilson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAEL.WILSON@EXAMPLE.COM",
                            NormalizedUserName = "MICHAEL.WILSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC+Rd61t2PZfuU5W8mJ7KdCgJdxWj/MTtEzsRmOzTDnCPCoU7hLYqy44d7sT7zvv0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88e07351-cfe7-4be4-9b41-ce71a99096a4",
                            TwoFactorEnabled = false,
                            UserName = "michael.wilson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "d8d0d177-60a0-4925-b4ed-bb36aebb48c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7e352d1-a6d5-47cc-af65-dfb617cc4401",
                            Email = "elizabeth.moore@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIZABETH.MOORE@EXAMPLE.COM",
                            NormalizedUserName = "ELIZABETH.MOORE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFL4dY/BouqqUTEmC143ZVrJAGr3Oe9dLKsvF7uK5RRKSdu5rwiLMJ5ysbD9MwI+kQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee058937-be2a-4815-8028-b67ff6298f35",
                            TwoFactorEnabled = false,
                            UserName = "elizabeth.moore@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "82c99b5d-6573-4514-81eb-183ace313419",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ee7164d-e6ac-483e-a673-250f9e930e7b",
                            Email = "david.taylor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.TAYLOR@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.TAYLOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHWbnaO4y2/yUAZSiM3dDGGpWwyqz5oR2mJV3IXPW3yE3g7gZ2uLgh+HpV+1uANFwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "251122c8-260b-452a-8b82-a40147052bb3",
                            TwoFactorEnabled = false,
                            UserName = "david.taylor@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "a8d287e8-357a-40f3-893a-ed507ed6a85d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41728920-0efb-4be8-b4c6-f6d87a968de0",
                            Email = "susan.anderson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUSAN.ANDERSON@EXAMPLE.COM",
                            NormalizedUserName = "SUSAN.ANDERSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH8eO1d3eeqtYFaPDISnd4qWSGjmSsyTxYrXqvhZepuaVUiYB6D2Qivnrd5ASzfSjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21abaada-4883-426d-85ce-4b5a6301c5f3",
                            TwoFactorEnabled = false,
                            UserName = "susan.anderson@example.com",
                            UserType = "Patient"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the Department");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasComment("Department info");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            IsDeleted = false,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            IsDeleted = false,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            IsDeleted = false,
                            Name = "Internal"
                        },
                        new
                        {
                            Id = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            IsDeleted = false,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            IsDeleted = false,
                            Name = "Oncology"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor`s unique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department works the doctor");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Last Name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Doctor`s monthly salary");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Speciality");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors", t =>
                        {
                            t.HasComment("Doctor info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("78429ef3-6e8f-441a-8224-cf9a41152a2c"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "smith@abv.bg",
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Smith",
                            Salary = 1200m,
                            Specialty = "Cardiology",
                            UserId = "78429ef3-6e8f-441a-8224-cf9a41152a2c"
                        },
                        new
                        {
                            Id = new Guid("38a0afd0-c8d6-4674-b24a-db1e6861fcc8"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "jhondoe@abv.bg",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            Salary = 1000m,
                            Specialty = "Neurology",
                            UserId = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8"
                        },
                        new
                        {
                            Id = new Guid("a15998c9-52af-4c6b-a032-b135b879e5a7"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "jhonson@abv.bg",
                            FirstName = "Sara",
                            IsDeleted = false,
                            LastName = "Johnson",
                            Salary = 1150m,
                            Specialty = "Pediatrics",
                            UserId = "a15998c9-52af-4c6b-a032-b135b879e5a7"
                        },
                        new
                        {
                            Id = new Guid("0b04322a-bab8-41ca-b791-ec1abdd7e8a0"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovp@abv.bg",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Petrov",
                            Salary = 2150m,
                            Specialty = "Surgeon",
                            UserId = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0"
                        },
                        new
                        {
                            Id = new Guid("18538144-c4ee-4d7d-b4eb-fd9267ca134f"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovai@abv.bg",
                            FirstName = "Ivana",
                            IsDeleted = false,
                            LastName = "Petrova",
                            Salary = 4150m,
                            Specialty = "Surgeon",
                            UserId = "18538144-c4ee-4d7d-b4eb-fd9267ca134f"
                        },
                        new
                        {
                            Id = new Guid("c6e29719-7856-4b5f-b5da-84ed3a292877"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "slaveykir@abv.bg",
                            FirstName = "Slavey",
                            IsDeleted = false,
                            LastName = "Kirilov",
                            Salary = 6150m,
                            Specialty = "Oncologyst",
                            UserId = "c6e29719-7856-4b5f-b5da-84ed3a292877"
                        },
                        new
                        {
                            Id = new Guid("57e1941c-1412-4384-b819-d67a19204baf"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "angelovz@abv.bg",
                            FirstName = "Zhoro",
                            IsDeleted = false,
                            LastName = "Angelov",
                            Salary = 3750m,
                            Specialty = "Oncologyst",
                            UserId = "57e1941c-1412-4384-b819-d67a19204baf"
                        },
                        new
                        {
                            Id = new Guid("fddefbf4-e1a5-42a1-a64d-e0843640267c"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "atanasovao@abv.bg",
                            FirstName = "Olya",
                            IsDeleted = false,
                            LastName = "Atanasova",
                            Salary = 3250m,
                            Specialty = "Oncologyst",
                            UserId = "fddefbf4-e1a5-42a1-a64d-e0843640267c"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager unique identifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Manager Full Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Manager phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Data for Hospital Manager");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("06ea23a1-095e-475f-937e-cb3e34c4def2"),
                            EmailAddress = "ivanovst@abv.bg",
                            FullName = "Stoian Ivanov",
                            IsDeleted = false,
                            PhoneNumber = "+359883456789",
                            UserId = "06ea23a1-095e-475f-937e-cb3e34c4def2"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse unnique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse`s department");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse first name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse last name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Nurse monthly salary");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Nurses", t =>
                        {
                            t.HasComment("Nurse info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5c4962-15bb-4282-bfbf-5a0cd30ba664"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "williams@abv.bg",
                            FirstName = "Emma",
                            IsDeleted = false,
                            LastName = "Williams",
                            Salary = 650m,
                            UserId = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664"
                        },
                        new
                        {
                            Id = new Guid("0f1babbe-d5db-49b9-9624-47b9d69df236"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "brown@abv.bg",
                            FirstName = "Liam",
                            IsDeleted = false,
                            LastName = "Brown",
                            Salary = 1020m,
                            UserId = "0f1babbe-d5db-49b9-9624-47b9d69df236"
                        },
                        new
                        {
                            Id = new Guid("af558d53-8adc-45ba-bfdd-1ca9e11e7185"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "davissophia@abv.bg",
                            FirstName = "Sophia",
                            IsDeleted = false,
                            LastName = "Davis",
                            Salary = 670m,
                            UserId = "af558d53-8adc-45ba-bfdd-1ca9e11e7185"
                        },
                        new
                        {
                            Id = new Guid("c55b3e3f-6604-4bf4-a9c8-014d0c146003"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "miller@abv.bg",
                            FirstName = "Noah",
                            IsDeleted = false,
                            LastName = "Miller",
                            Salary = 640m,
                            UserId = "c55b3e3f-6604-4bf4-a9c8-014d0c146003"
                        },
                        new
                        {
                            Id = new Guid("3c8870b2-58cf-4341-8ea1-d024520563d0"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "taylor@abv.bg",
                            FirstName = "Olivia",
                            IsDeleted = false,
                            LastName = "Taylor",
                            Salary = 660m,
                            UserId = "3c8870b2-58cf-4341-8ea1-d024520563d0"
                        },
                        new
                        {
                            Id = new Guid("7c032bc0-04e2-4111-bbfb-a59d46791529"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "taskovao@abv.bg",
                            FirstName = "Olga",
                            IsDeleted = false,
                            LastName = "Taskova",
                            Salary = 680m,
                            UserId = "7c032bc0-04e2-4111-bbfb-a59d46791529"
                        },
                        new
                        {
                            Id = new Guid("23fbee5b-fbe0-49a4-b312-6a5471f79dca"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "nikolovapa@abv.bg",
                            FirstName = "Paola",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            Salary = 680m,
                            UserId = "23fbee5b-fbe0-49a4-b312-6a5471f79dca"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of Patient");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Patient address");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department the patient is assigned");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient Personal Citizen Number");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient First Name");

                    b.Property<bool>("HasMedicalInsurance")
                        .HasColumnType("bit")
                        .HasComment("Specify if the patient is insured");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient Last Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient phone number");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room of the patient");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients", t =>
                        {
                            t.HasComment("Patient Info Table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("45ff5a3c-c27e-4e62-8c90-4954281d46d0"),
                            Address = "Sofi, ul.Rezovo 13, et.2, ap.6",
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EGN = "4810234567",
                            EmailAddress = "ivanovivan@abv.bg",
                            FirstName = "Ivan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            UserId = "45ff5a3c-c27e-4e62-8c90-4954281d46d0"
                        },
                        new
                        {
                            Id = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            Address = "Sofi, ul.Belomorska, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6212094475",
                            EmailAddress = "stefanovp@abv.bg",
                            FirstName = "Petar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Stefanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415"
                        },
                        new
                        {
                            Id = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            Address = "Sofi, bul.Vitosha 123, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6102193476",
                            EmailAddress = "petrovlazar@abv.bg",
                            FirstName = "Lazar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "621fb5c5-b634-405d-951b-3088891c3d5c"
                        },
                        new
                        {
                            Id = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            Address = "Sofi, bul.Vitosha 3, et.7, ap.16",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "8302198562",
                            EmailAddress = "petrovavanya@abv.bg",
                            FirstName = "Vanya",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrova",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "dd5538d3-1f68-412f-9949-94edde16d8a2"
                        },
                        new
                        {
                            Id = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            Address = "Sofi, ul.Rezovo 13, et.2, ap.6",
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EGN = "4810234567",
                            EmailAddress = "ivanovivan@abv.bg",
                            FirstName = "Ivan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            UserId = "17e9933d-2a1b-467b-b6a2-79297246b8b3"
                        },
                        new
                        {
                            Id = new Guid("a001bd24-5c2a-4f7a-b000-5f7bd233cd12"),
                            Address = "123 Elm Street",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "1234567890",
                            EmailAddress = "james.anderson@example.com",
                            FirstName = "James",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Anderson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            UserId = "a001bd24-5c2a-4f7a-b000-5f7bd233cd12"
                        },
                        new
                        {
                            Id = new Guid("134d8ce3-4c26-434a-90b4-f59ae5457a01"),
                            Address = "456 Maple Avenue",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "2345678901",
                            EmailAddress = "mary.johnson@example.com",
                            FirstName = "Mary",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Johnson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            UserId = "134d8ce3-4c26-434a-90b4-f59ae5457a01"
                        },
                        new
                        {
                            Id = new Guid("17139a72-76d4-4362-aa27-18a64cc8d285"),
                            Address = "789 Oak Boulevard",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "3456789012",
                            EmailAddress = "robert.williams@example.com",
                            FirstName = "Robert",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Williams",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "17139a72-76d4-4362-aa27-18a64cc8d285"
                        },
                        new
                        {
                            Id = new Guid("15050ff2-ed6c-475f-8831-f61d54a29175"),
                            Address = "321 Pine Lane",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "4567890123",
                            EmailAddress = "patricia.brown@example.com",
                            FirstName = "Patricia",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Brown",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "15050ff2-ed6c-475f-8831-f61d54a29175"
                        },
                        new
                        {
                            Id = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            Address = "987 Birch Road",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "6789012345",
                            EmailAddress = "jennifer.miller@example.com",
                            FirstName = "Jennifer",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Miller",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "76222e29-cbf5-4335-b2e4-fa6a77afeab1"
                        },
                        new
                        {
                            Id = new Guid("3110d510-2d4d-4e84-9f69-84794965586d"),
                            Address = "159 Walnut Avenue",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "7890123456",
                            EmailAddress = "michael.wilson@example.com",
                            FirstName = "Michael",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Wilson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "3110d510-2d4d-4e84-9f69-84794965586d"
                        },
                        new
                        {
                            Id = new Guid("d8d0d177-60a0-4925-b4ed-bb36aebb48c4"),
                            Address = "159 Walnut Avenue",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "8901234567",
                            EmailAddress = "elizabeth.moore@example.com",
                            FirstName = "Elizabeth",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Moore",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "d8d0d177-60a0-4925-b4ed-bb36aebb48c4"
                        },
                        new
                        {
                            Id = new Guid("82c99b5d-6573-4514-81eb-183ace313419"),
                            Address = "159 Walnut Avenue",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "9012345678",
                            EmailAddress = "david.taylor@example.com",
                            FirstName = "David",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Moore",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "82c99b5d-6573-4514-81eb-183ace313419"
                        },
                        new
                        {
                            Id = new Guid("a8d287e8-357a-40f3-893a-ed507ed6a85d"),
                            Address = "123 Elm Court",
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EGN = "0123456789",
                            EmailAddress = "susan.anderson@example.com",
                            FirstName = "Susan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Anderson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("994355a8-add4-4d49-a52f-f610e4cb6893"),
                            UserId = "a8d287e8-357a-40f3-893a-ed507ed6a85d"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientsDoctors");

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            DoctorId = new Guid("78429ef3-6e8f-441a-8224-cf9a41152a2c")
                        },
                        new
                        {
                            PatientId = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            DoctorId = new Guid("38a0afd0-c8d6-4674-b24a-db1e6861fcc8")
                        },
                        new
                        {
                            PatientId = new Guid("a001bd24-5c2a-4f7a-b000-5f7bd233cd12"),
                            DoctorId = new Guid("a15998c9-52af-4c6b-a032-b135b879e5a7")
                        },
                        new
                        {
                            PatientId = new Guid("134d8ce3-4c26-434a-90b4-f59ae5457a01"),
                            DoctorId = new Guid("a15998c9-52af-4c6b-a032-b135b879e5a7")
                        },
                        new
                        {
                            PatientId = new Guid("17139a72-76d4-4362-aa27-18a64cc8d285"),
                            DoctorId = new Guid("78429ef3-6e8f-441a-8224-cf9a41152a2c")
                        },
                        new
                        {
                            PatientId = new Guid("15050ff2-ed6c-475f-8831-f61d54a29175"),
                            DoctorId = new Guid("a15998c9-52af-4c6b-a032-b135b879e5a7")
                        },
                        new
                        {
                            PatientId = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            DoctorId = new Guid("0b04322a-bab8-41ca-b791-ec1abdd7e8a0")
                        },
                        new
                        {
                            PatientId = new Guid("3110d510-2d4d-4e84-9f69-84794965586d"),
                            DoctorId = new Guid("0b04322a-bab8-41ca-b791-ec1abdd7e8a0")
                        },
                        new
                        {
                            PatientId = new Guid("d8d0d177-60a0-4925-b4ed-bb36aebb48c4"),
                            DoctorId = new Guid("18538144-c4ee-4d7d-b4eb-fd9267ca134f")
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "TreatmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("PatientsTreatments");

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909")
                        },
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2")
                        },
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            TreatmentId = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2")
                        },
                        new
                        {
                            PatientId = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            TreatmentId = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("39bf20f4-81c8-4cd6-9262-61184c8d6b9a")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909")
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room unique identifier");

                    b.Property<int>("BedCount")
                        .HasColumnType("int")
                        .HasComment("Room`s beds count");

                    b.Property<Guid>("DepartmnetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department is the room");

                    b.Property<bool>("HasFreeBeds")
                        .HasColumnType("bit")
                        .HasComment("Does room has free beds?");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int")
                        .HasComment("Room Number");

                    b.HasKey("Id");

                    b.HasIndex("DepartmnetId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasComment("Room information table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            BedCount = 1,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = new Guid("fc4cc53a-2a34-4232-b63a-0724783fdfa3"),
                            BedCount = 2,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = new Guid("334c034e-51e8-4956-a6a5-f25ce92bf8fa"),
                            BedCount = 2,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 201
                        },
                        new
                        {
                            Id = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            BedCount = 3,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 202
                        },
                        new
                        {
                            Id = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            BedCount = 3,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 301
                        },
                        new
                        {
                            Id = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            BedCount = 2,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 302
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Treatment unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Treatments", t =>
                        {
                            t.HasComment("Treatment info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667"),
                            IsDeleted = false,
                            Name = "Manual Therapy",
                            Price = 100.0m
                        },
                        new
                        {
                            Id = new Guid("39bf20f4-81c8-4cd6-9262-61184c8d6b9a"),
                            IsDeleted = false,
                            Name = "Massage Therapy",
                            Price = 80.0m
                        },
                        new
                        {
                            Id = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909"),
                            IsDeleted = false,
                            Name = "Chiropractic Adjustment",
                            Price = 120.0m
                        },
                        new
                        {
                            Id = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2"),
                            IsDeleted = false,
                            Name = "Dialysis",
                            Price = 170.0m
                        },
                        new
                        {
                            Id = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0"),
                            IsDeleted = false,
                            Name = "Physical Therapy",
                            Price = 200.0m
                        },
                        new
                        {
                            Id = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c"),
                            IsDeleted = false,
                            Name = "Vaccination",
                            Price = 20.0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("DepartmentDoctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Managers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Nurses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Room", "Room")
                        .WithMany("Patients")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("Doctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("PatientTreatments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Treatment", "Treatment")
                        .WithMany("Patients")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmnetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Managers");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Navigation("DepartmentDoctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Navigation("DoctorPatients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("PatientTreatments");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
