// <auto-generated />
using System;
using HospitalManagmentApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalManagmentApp.Data.Migrations
{
    [DbContext(typeof(HMDbContext))]
    [Migration("20241210115622_doctorsCommentsForNameChanged")]
    partial class doctorsCommentsForNameChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "78429ef3-6e8f-441a-8224-cf9a41152a2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6775e35-ac57-4cc6-b44e-155d39aab58e",
                            Email = "smith@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SMITH@ABV.BG",
                            NormalizedUserName = "SMITH@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEDC0GZpkaElTw1AdcT/sCxx5nMnF0i69AayauCyDPEan6eIfRYDU6WqPtvOLlNV4JA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed206048-e297-4f08-b5b6-2fa8236744df",
                            TwoFactorEnabled = false,
                            UserName = "smith@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2dad2d6d-6c3c-4eb6-b283-a16d9a244f19",
                            Email = "jhondoe@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONDOE@ABV.BG",
                            NormalizedUserName = "JHONDOE@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPJ/tC9B2KxqjIL7ElMgDiV6QEDSf4/1dxfomIhvH8WfAUQCcwdwNNaR0wJkTytWqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea95c156-41d6-4de9-bbb6-d7ccc4672568",
                            TwoFactorEnabled = false,
                            UserName = "jhondoe@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "a15998c9-52af-4c6b-a032-b135b879e5a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39cc9609-aeed-419c-bcc6-959c7c54b306",
                            Email = "jhonson@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONSON@ABV.BG",
                            NormalizedUserName = "JHONSON@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAI2flDTt1dbLCLxY8YFMwmU3n6Cqe6DLNL+3LBk31v+n1WVnOL1TkkriNakveqPig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac3a9f2c-7edd-459b-be97-fbc6ba6520db",
                            TwoFactorEnabled = false,
                            UserName = "jhonson@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc48d307-82eb-4a81-8c2a-24a4addb3eb5",
                            Email = "petrovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVP@ABV.BG",
                            NormalizedUserName = "PETROVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPi2ImgY+COi4m+nVWjuOzDeOhgF0uC/MrCmK5cDgU8N/SWylVpKWaVV6SXoT1f98A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5169fade-bb90-46a7-92a9-3368a89b0b48",
                            TwoFactorEnabled = false,
                            UserName = "petrovp@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "18538144-c4ee-4d7d-b4eb-fd9267ca134f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f091d96-5b1b-4232-8be5-a854104e26d3",
                            Email = "petrovai@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAI@ABV.BG",
                            NormalizedUserName = "PETROVAI@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAELMAZ2eLWn8CQPrJbm6wKrSjFEBIjM1KPoyBr0xy9d06mx4drIxpiYdNeh4MB5wk4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d9273c8-ec68-49f6-9aeb-00025f93413d",
                            TwoFactorEnabled = false,
                            UserName = "petrovai@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad125417-bd0c-4d29-aa9b-a2b4d4909736",
                            Email = "williams@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLIAMS@ABV.BG",
                            NormalizedUserName = "WILLIAMS@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEGYNPaB6YFntak+6kdQ4W1Emm8cZD33+zbSAHEdlqDpQUdRbhxwN8LLO/LPXdgIjAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4181687-0e28-4bd2-aed8-af03b381db2d",
                            TwoFactorEnabled = false,
                            UserName = "williams@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "0f1babbe-d5db-49b9-9624-47b9d69df236",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d9adcfb-fbcd-470a-bfcd-d5d956320734",
                            Email = "brown@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BROWN@ABV.BG",
                            NormalizedUserName = "BROWN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEK9Xp4NupaISULghyBrbUyP8IlErC8t5iQ5lCL/FEUO4gqw6yijBfpOW6tkZKSgWdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a3678c0-0f87-424d-80f5-54b5c62e144d",
                            TwoFactorEnabled = false,
                            UserName = "brown@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "06ea23a1-095e-475f-937e-cb3e34c4def2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "126733ba-a030-4ae8-ada5-4b2b0a747173",
                            Email = "ivanovst@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVST@ABV.BG",
                            NormalizedUserName = "IVANOVST@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEEJG/fPbaqst7TL/cwspLSOx0z48UYZkUt+0CqNnBVZ8L2NWN3bRMVa5sp4bjgiVbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "344931e7-63d1-4219-8980-8ffa90ffb8cb",
                            TwoFactorEnabled = false,
                            UserName = "ivanovst@abv.bg",
                            UserType = "Manager"
                        },
                        new
                        {
                            Id = "af558d53-8adc-45ba-bfdd-1ca9e11e7185",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "180ce7b8-1caf-4a09-93bb-bbf3b4cb8662",
                            Email = "davissophia@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVISSOPHIA@ABV.BG",
                            NormalizedUserName = "DAVISSOPHIA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEOBaQwU0LAeOs+tFraaVqEFsM4K/ROKOOfY1odnVFXxRxlnDm+oeY7X7mf/qv3qNFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98cc4628-d864-484a-82ad-a6e8a340383b",
                            TwoFactorEnabled = false,
                            UserName = "davissophia@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "c55b3e3f-6604-4bf4-a9c8-014d0c146003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb547ad3-cf14-4bb5-928f-78426e814421",
                            Email = "miller@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MILLER@ABV.BG",
                            NormalizedUserName = "MILLER@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPqwPxceG+DQDXOC7H735i5QLNc7GtvPFCi9IyUprIiQfYo00GJ+JiX4uxUb2IuT9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48b0894a-e795-4680-bea7-fe49061fc065",
                            TwoFactorEnabled = false,
                            UserName = "miller@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "3c8870b2-58cf-4341-8ea1-d024520563d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f519f2d-c478-48ff-965a-f0e6b7b64ed1",
                            Email = "taylor@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TAYLOR@ABV.BG",
                            NormalizedUserName = "TAYLOR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEGmm8To/0oXMnvt9Rcf43EbNWuAX2jXfHaqdLo2ogOdPR64vBdSt/yy/2TUj8Aq6zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "207e8c51-1bc3-463e-8c82-812734b6e58e",
                            TwoFactorEnabled = false,
                            UserName = "taylor@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "17e9933d-2a1b-467b-b6a2-79297246b8b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "319099c8-526e-4b14-86de-2490e2b4c97e",
                            Email = "ivanovivan@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVIVAN@ABV.BG",
                            NormalizedUserName = "IVANOVIVAN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEE8uCTxiDF/6mrn/NyqnjjdUXmj1neyxsh+NpOhqxmipg9EGUxrzoKsBhcy/JmpkXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3596762b-f117-4ca5-8bdd-494820796214",
                            TwoFactorEnabled = false,
                            UserName = "ivanovivan@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b655b235-8f1f-463b-840b-e498e1887fa1",
                            Email = "stefanovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANOVP@ABV.BG",
                            NormalizedUserName = "STEFANOVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEEvDo/0LlGTLc8lwgpGhwVRJlNn6BZHvfM+QMbac1Y8k94V6pfN9TEM25+g3pw9/ZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "045de085-e4e7-475a-be7a-c681e3cb4126",
                            TwoFactorEnabled = false,
                            UserName = "stefanovp@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "621fb5c5-b634-405d-951b-3088891c3d5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3dedc51e-caad-4cf2-a288-23d3f4ed6165",
                            Email = "petrovlazar@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVLAZAR@ABV.BG",
                            NormalizedUserName = "PETROVLAZAR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEECsXBcF4kfQJp+7tAEHm4ixWL3lyqiWZq/dUpbIf6S5pxPdUZDZVyYKm54pU909Lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "436e7ac9-2045-47d6-b68f-58577c3bf3f9",
                            TwoFactorEnabled = false,
                            UserName = "petrovlazar@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "dd5538d3-1f68-412f-9949-94edde16d8a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "155c9d83-7a17-4b6f-944d-7016d77e0b6c",
                            Email = "petrovavanya@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAVANYA@ABV.BG",
                            NormalizedUserName = "PETROVAVANYA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEOczoRipocEacrnVFgoGMl7mWS14mYybVBgHwSp9uOJyy3meh6opP3KCKqAwpTLT2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5aeb9c44-bdcf-4fb2-949d-462342585382",
                            TwoFactorEnabled = false,
                            UserName = "petrovavanya@abv.bg",
                            UserType = "Patient"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the Department");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasComment("Department info");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            IsDeleted = false,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            IsDeleted = false,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            IsDeleted = false,
                            Name = "Internal"
                        },
                        new
                        {
                            Id = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            IsDeleted = false,
                            Name = "Pediatrics"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor`s unique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department works the doctor");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Last Name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Doctor`s monthly salary");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Speciality");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors", t =>
                        {
                            t.HasComment("Doctor info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("78429ef3-6e8f-441a-8224-cf9a41152a2c"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "smith@abv.bg",
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Smith",
                            Salary = 1200m,
                            Specialty = "Cardiology",
                            UserId = "78429ef3-6e8f-441a-8224-cf9a41152a2c"
                        },
                        new
                        {
                            Id = new Guid("38a0afd0-c8d6-4674-b24a-db1e6861fcc8"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "jhondoe@abv.bg",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            Salary = 1000m,
                            Specialty = "Neurology",
                            UserId = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8"
                        },
                        new
                        {
                            Id = new Guid("a15998c9-52af-4c6b-a032-b135b879e5a7"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "jhonson@abv.bg",
                            FirstName = "Sara",
                            IsDeleted = false,
                            LastName = "Johnson",
                            Salary = 1150m,
                            Specialty = "Pediatrics",
                            UserId = "a15998c9-52af-4c6b-a032-b135b879e5a7"
                        },
                        new
                        {
                            Id = new Guid("0b04322a-bab8-41ca-b791-ec1abdd7e8a0"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovp@abv.bg",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Petrov",
                            Salary = 2150m,
                            Specialty = "Surgeon",
                            UserId = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0"
                        },
                        new
                        {
                            Id = new Guid("18538144-c4ee-4d7d-b4eb-fd9267ca134f"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovai@abv.bg",
                            FirstName = "Ivana",
                            IsDeleted = false,
                            LastName = "Petrova",
                            Salary = 4150m,
                            Specialty = "Surgeon",
                            UserId = "18538144-c4ee-4d7d-b4eb-fd9267ca134f"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager unique identifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Manager Full Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Manager phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Data for Hospital Manager");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("06ea23a1-095e-475f-937e-cb3e34c4def2"),
                            EmailAddress = "ivanovst@abv.bg",
                            FullName = "Stoian Ivanov",
                            IsDeleted = false,
                            PhoneNumber = "+359883456789",
                            UserId = "06ea23a1-095e-475f-937e-cb3e34c4def2"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse unnique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse`s department");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse first name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse last name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Nurse monthly salary");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Nurses", t =>
                        {
                            t.HasComment("Nurse info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5c4962-15bb-4282-bfbf-5a0cd30ba664"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "williams@abv.bg",
                            FirstName = "Emma",
                            IsDeleted = false,
                            LastName = "Williams",
                            Salary = 650m,
                            UserId = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664"
                        },
                        new
                        {
                            Id = new Guid("0f1babbe-d5db-49b9-9624-47b9d69df236"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "brown@abv.bg",
                            FirstName = "Liam",
                            IsDeleted = false,
                            LastName = "Brown",
                            Salary = 1020m,
                            UserId = "0f1babbe-d5db-49b9-9624-47b9d69df236"
                        },
                        new
                        {
                            Id = new Guid("af558d53-8adc-45ba-bfdd-1ca9e11e7185"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "davissophia@abv.bg",
                            FirstName = "Sophia",
                            IsDeleted = false,
                            LastName = "Davis",
                            Salary = 670m,
                            UserId = "af558d53-8adc-45ba-bfdd-1ca9e11e7185"
                        },
                        new
                        {
                            Id = new Guid("c55b3e3f-6604-4bf4-a9c8-014d0c146003"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "miller@abv.bg",
                            FirstName = "Noah",
                            IsDeleted = false,
                            LastName = "Miller",
                            Salary = 640m,
                            UserId = "c55b3e3f-6604-4bf4-a9c8-014d0c146003"
                        },
                        new
                        {
                            Id = new Guid("3c8870b2-58cf-4341-8ea1-d024520563d0"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "taylor@abv.bg",
                            FirstName = "Olivia",
                            IsDeleted = false,
                            LastName = "Taylor",
                            Salary = 660m,
                            UserId = "3c8870b2-58cf-4341-8ea1-d024520563d0"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of Patient");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Patient address");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department the patient is assigned");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient Personal Citizen Number");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient First Name");

                    b.Property<bool>("HasMedicalInsurance")
                        .HasColumnType("bit")
                        .HasComment("Specify if the patient is insured");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient Last Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient phone number");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room of the patient");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients", t =>
                        {
                            t.HasComment("Patient Info Table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            Address = "Sofi, ul.Rezovo 13, et.2, ap.6",
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EGN = "4810234567",
                            EmailAddress = "ivanovivan@abv.bg",
                            FirstName = "Ivan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            UserId = "17e9933d-2a1b-467b-b6a2-79297246b8b3"
                        },
                        new
                        {
                            Id = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            Address = "Sofi, ul.Belomorska, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6212094475",
                            EmailAddress = "stefanovp@abv.bg",
                            FirstName = "Petar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Stefanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415"
                        },
                        new
                        {
                            Id = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            Address = "Sofi, bul.Vitosha 123, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6102193476",
                            EmailAddress = "petrovlazar@abv.bg",
                            FirstName = "Lazar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "621fb5c5-b634-405d-951b-3088891c3d5c"
                        },
                        new
                        {
                            Id = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            Address = "Sofi, bul.Vitosha 3, et.7, ap.16",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "8302198562",
                            EmailAddress = "petrovavanya@abv.bg",
                            FirstName = "Vanya",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrova",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "dd5538d3-1f68-412f-9949-94edde16d8a2"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientsDoctors");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "TreatmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("PatientsTreatments");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room unique identifier");

                    b.Property<int>("BedCount")
                        .HasColumnType("int")
                        .HasComment("Room`s beds count");

                    b.Property<Guid>("DepartmnetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department is the room");

                    b.Property<bool>("HasFreeBeds")
                        .HasColumnType("bit")
                        .HasComment("Does room has free beds?");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int")
                        .HasComment("Room Number");

                    b.HasKey("Id");

                    b.HasIndex("DepartmnetId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasComment("Room information table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            BedCount = 1,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = new Guid("fc4cc53a-2a34-4232-b63a-0724783fdfa3"),
                            BedCount = 2,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = new Guid("334c034e-51e8-4956-a6a5-f25ce92bf8fa"),
                            BedCount = 2,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 201
                        },
                        new
                        {
                            Id = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            BedCount = 3,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 202
                        },
                        new
                        {
                            Id = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            BedCount = 3,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 301
                        },
                        new
                        {
                            Id = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            BedCount = 2,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 302
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Treatment unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Treatments", t =>
                        {
                            t.HasComment("Treatment info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd76e5a0-0631-4d4d-8a3f-5414e8556941"),
                            IsDeleted = false,
                            Name = "Physical Therapy",
                            Price = 100.0m
                        },
                        new
                        {
                            Id = new Guid("8fe37543-0bdf-4334-a62b-59a1c8b4fa8c"),
                            IsDeleted = false,
                            Name = "Massage Therapy",
                            Price = 80.0m
                        },
                        new
                        {
                            Id = new Guid("6e7d387c-3afe-405d-b067-4a25a3e3f2b0"),
                            IsDeleted = false,
                            Name = "Chiropractic Adjustment",
                            Price = 120.0m
                        },
                        new
                        {
                            Id = new Guid("d60050be-6a5f-4e11-9a35-4b8ba5348613"),
                            IsDeleted = false,
                            Name = "Manual therapy",
                            Price = 170.0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("DepartmentDoctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Managers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Nurses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Room", "Room")
                        .WithMany("Patients")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("Doctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("PatientTreatments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Treatment", "Treatment")
                        .WithMany("Patients")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmnetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Managers");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Navigation("DepartmentDoctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Navigation("DoctorPatients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("PatientTreatments");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
