// <auto-generated />
using System;
using HospitalManagmentApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalManagmentApp.Data.Migrations
{
    [DbContext(typeof(HMDbContext))]
    [Migration("20241210221240_SeedPatientsTreatments")]
    partial class SeedPatientsTreatments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "78429ef3-6e8f-441a-8224-cf9a41152a2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "441a543c-db63-47ba-931a-c32faefc645e",
                            Email = "smith@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SMITH@ABV.BG",
                            NormalizedUserName = "SMITH@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAELa62FcdtZc0WJj9H3lE0o1bSt4a0NFq8MTyFLcGJ3BFRRiwpGaQ4EgYuT8gdaRmaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e759640-bd5a-42e7-9edd-d686c012d3ae",
                            TwoFactorEnabled = false,
                            UserName = "smith@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "598ec93e-0bbb-4548-abb2-c42d73b26b7c",
                            Email = "jhondoe@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONDOE@ABV.BG",
                            NormalizedUserName = "JHONDOE@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAQM/WwVZyxZu/B4n+NWrcGa4DHl+ESfO1rkXciGIDQ0w2p1kJ65vMQ1UhCpCCpeMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7306cfbd-f863-4490-9da5-3d2213aad5e5",
                            TwoFactorEnabled = false,
                            UserName = "jhondoe@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "a15998c9-52af-4c6b-a032-b135b879e5a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a0b581f-1513-4193-be4f-0e8e8c8d5dd0",
                            Email = "jhonson@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JHONSON@ABV.BG",
                            NormalizedUserName = "JHONSON@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEF7a/L9DpWI4eUzZHTUASkmJt6utSZ/OReKKb2WjpR7UrISO17e+MfBPFx+Ovs7ShQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff60e195-23fd-484f-afd1-9751e553fcfc",
                            TwoFactorEnabled = false,
                            UserName = "jhonson@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51a11144-05d6-494b-b10c-8c2565de8ff2",
                            Email = "petrovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVP@ABV.BG",
                            NormalizedUserName = "PETROVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEDXdabJmzGrwdlPITnx1sZ56YTL1gJaLEIA0IVLRj/VpTK5PFt8jA8klUqkBc+29uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb12515f-15fc-47c8-a2a8-32d43dd3ef34",
                            TwoFactorEnabled = false,
                            UserName = "petrovp@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "18538144-c4ee-4d7d-b4eb-fd9267ca134f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad93b740-f6f7-444f-bd32-eb017871bffb",
                            Email = "petrovai@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAI@ABV.BG",
                            NormalizedUserName = "PETROVAI@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAED88AgAhTXiwvRrZMAaB8YBTCf/DMqp2W0gwBYVxqpAdJoCddK3D4Pkal9HiMifc0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64d1ba1f-74ef-4d5c-aa88-007461161887",
                            TwoFactorEnabled = false,
                            UserName = "petrovai@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "c6e29719-7856-4b5f-b5da-84ed3a292877",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9a5dd65-cab5-4243-be83-31816b38e5ee",
                            Email = "slaveykir@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEk6K1a5WonO/KwZy8Ip1gYx5bNXxhC2kevLRgeFJsZL8EDuCemGa/9E147IaB2+9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69ba8217-aaaa-4b85-a45b-aec9cc474cff",
                            TwoFactorEnabled = false,
                            UserName = "slaveykir@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "57e1941c-1412-4384-b819-d67a19204baf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9aa560d6-cc3b-44b8-b7ab-2f1daa848a21",
                            Email = "angelovz@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBeQINrOjiPw19W17MvVN7rSu3ibmyzpRLjwdxMeha/gakLWV6leEIurN22A8GFTIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f82b3c4f-9b67-456e-80b7-629b15a41da2",
                            TwoFactorEnabled = false,
                            UserName = "angelovz@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "fddefbf4-e1a5-42a1-a64d-e0843640267c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9138787-c4f9-4ee9-a4b1-ef394cd695a6",
                            Email = "atanasovao@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJXcq5Kq12DsX7Ie2eylM7SCu2NjNAIbwe3BLYVudvhTNnKudltZixQEGBOHeZCJ8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84864199-f2fa-4934-a7c9-a66e949cf286",
                            TwoFactorEnabled = false,
                            UserName = "atanasovao@abv.bg",
                            UserType = "Doctor"
                        },
                        new
                        {
                            Id = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a8ff809-eb3d-4ca4-a9d9-f6c69345b315",
                            Email = "williams@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLIAMS@ABV.BG",
                            NormalizedUserName = "WILLIAMS@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEDsTq8jkuzsiVyfCIw8/IL6Nb1n7BOvGZOJ6skULp4Ny1rCotYrf07Uw2VK3A0l7ww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a1588dd-bba2-42db-8b7b-e67a98416f6e",
                            TwoFactorEnabled = false,
                            UserName = "williams@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "0f1babbe-d5db-49b9-9624-47b9d69df236",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93f68d79-375f-4f69-b9a8-3af793bf5474",
                            Email = "brown@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BROWN@ABV.BG",
                            NormalizedUserName = "BROWN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEEBO73Yk4sjpEDYm6jF8oV1LGBrZ7moPOg5hA6LBLgMk0tsW7fbq5ZZX6o3lhOmGNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f8196f7-64f9-4c60-bd90-483c1f3bf23f",
                            TwoFactorEnabled = false,
                            UserName = "brown@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "06ea23a1-095e-475f-937e-cb3e34c4def2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57fdb967-5f02-4250-8e98-5c40dde587c5",
                            Email = "ivanovst@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVST@ABV.BG",
                            NormalizedUserName = "IVANOVST@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEK9dESxw3Uycwgq+MRQS4va6xgEWQtuaXbqh9sJTz/q8h6gkHCODB2qGkp1z8oh57w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f41619f8-3f77-4973-9f4b-825cbe2ab59b",
                            TwoFactorEnabled = false,
                            UserName = "ivanovst@abv.bg",
                            UserType = "Manager"
                        },
                        new
                        {
                            Id = "af558d53-8adc-45ba-bfdd-1ca9e11e7185",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcdf868b-09e5-444b-a6b2-bd6fe69823f4",
                            Email = "davissophia@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVISSOPHIA@ABV.BG",
                            NormalizedUserName = "DAVISSOPHIA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKYqkhrRNaz8VQks5QrqyUIBTZU6e3lor9mTOh0LpQ80jp5fgDsKtfwwxBetX19GcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c54b0951-3c0b-4bb1-9f67-041c20a17fab",
                            TwoFactorEnabled = false,
                            UserName = "davissophia@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "c55b3e3f-6604-4bf4-a9c8-014d0c146003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74576824-18b5-431b-a62c-b9caaa780c03",
                            Email = "miller@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MILLER@ABV.BG",
                            NormalizedUserName = "MILLER@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEIhMyjhxobbxtrGDQBH8jfzEKXULvQ4qQPb1sXiumGbR3HxdkQxMdlchcN+dVVzkrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f58ae8d2-3f8c-49a7-a6c8-742c9be3d636",
                            TwoFactorEnabled = false,
                            UserName = "miller@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "3c8870b2-58cf-4341-8ea1-d024520563d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3940072c-202f-4dda-86c2-e903220da038",
                            Email = "taylor@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TAYLOR@ABV.BG",
                            NormalizedUserName = "TAYLOR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAECT3qhPveM0l6ygc/jBTyUmnKnjCm/nE2IZAdLkWdXLBmILP+VkBRd59SP5qatVEgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "457035ce-8d08-498f-91fd-cd9e024310c4",
                            TwoFactorEnabled = false,
                            UserName = "taylor@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "7c032bc0-04e2-4111-bbfb-a59d46791529",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38cc9539-147a-4c8b-8794-c7944f7c1534",
                            Email = "taskovao@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBKH9FyB0ZcDp2WB9mJwbGm09vVHNNEJULFkhhY4R7v+/kPYNv67VVvd/byClg//MA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdc42a16-93d4-44d8-bd4a-15b90344949e",
                            TwoFactorEnabled = false,
                            UserName = "taskovao@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "23fbee5b-fbe0-49a4-b312-6a5471f79dca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a535f3dc-8eb9-49b2-ba58-56b716c061cc",
                            Email = "nikolovapa@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEALDMZwPXdtzAw94AaRmzXGExA6grHnlXwL2dbI8Qq3YApmhySBsBqh0zzlFQ7+Mmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0e807ca-3d7c-4ac6-beaf-5905c6a0830f",
                            TwoFactorEnabled = false,
                            UserName = "nikolovapa@abv.bg",
                            UserType = "Nurse"
                        },
                        new
                        {
                            Id = "17e9933d-2a1b-467b-b6a2-79297246b8b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dad9593f-8589-4fe0-80d6-bf9f0d5f43a1",
                            Email = "ivanovivan@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOVIVAN@ABV.BG",
                            NormalizedUserName = "IVANOVIVAN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAECi0gAog8U1BFqiEPbefLXcrtAKs+DUIKKN9F0Op8cQ01OZLdnsLjQK7f1NpGcDdDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ea88a67-5dfe-47e3-b9a2-0b2c8ba5fa34",
                            TwoFactorEnabled = false,
                            UserName = "ivanovivan@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c8e79d5-a752-4e1c-9497-a55fca5d342d",
                            Email = "stefanovp@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANOVP@ABV.BG",
                            NormalizedUserName = "STEFANOVP@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEBBSdSH8ESePpauB0DxrORzldN5+b42rc2+7Mw2wsahARFLGHEMBuRJpNHtk/87aWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51c86916-6ec5-4f32-9fd5-c94c72fb0984",
                            TwoFactorEnabled = false,
                            UserName = "stefanovp@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "621fb5c5-b634-405d-951b-3088891c3d5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3817887f-ee14-46a7-a46f-35295d8e9744",
                            Email = "petrovlazar@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVLAZAR@ABV.BG",
                            NormalizedUserName = "PETROVLAZAR@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEC4m4utqPhL+eG2khEsx3xxS4iVbOGhvlI7CaLTX5gH+KggvaQShWyF1ZBrDt8fT0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e349a303-c54c-4a0d-bbed-fbb6d6fb3344",
                            TwoFactorEnabled = false,
                            UserName = "petrovlazar@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "dd5538d3-1f68-412f-9949-94edde16d8a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de3eee63-9d8d-4292-975c-d9a8cef78e43",
                            Email = "petrovavanya@abv.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROVAVANYA@ABV.BG",
                            NormalizedUserName = "PETROVAVANYA@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAMzHMPHMYkWXfcCYZ6irE9RG23/e2KYxoIKXCfAB2aIMjFO/c2l4epVW63ceiX5Bg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec44d621-04aa-49d9-a7c8-e2b246ca1873",
                            TwoFactorEnabled = false,
                            UserName = "petrovavanya@abv.bg",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "a001bd24-5c2a-4f7a-b000-5f7bd233cd12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6c20bd0-2eff-4bea-9b11-d3f4484d15b7",
                            Email = "james.anderson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENGmQi3+Pme9hIKPKrN/PNsiN4EZkaDh3LUIRB7yA7TXL9pqdHr9r0LQ4zZUxHkn6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "092d27d0-84e9-4a02-a45a-c70877a24db7",
                            TwoFactorEnabled = false,
                            UserName = "james.anderson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "134d8ce3-4c26-434a-90b4-f59ae5457a01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a768b856-1348-43ae-92e8-19f5a1f4c6ec",
                            Email = "mary.johnson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEI/ctUMsAoJTFDxXxzwOnLaDqXcSXfKV2aBKuS+ZitUZpdSrfF1m96SSbrJT+DwIPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6be6a7a0-b5a5-49fd-9f11-d18e579ae1c5",
                            TwoFactorEnabled = false,
                            UserName = "mary.johnson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "17139a72-76d4-4362-aa27-18a64cc8d285",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ef0ba64-d333-411e-bd6c-8f900e852fa0",
                            Email = "robert.williams@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEHgH2i/eWklNrGtbw3QsDssngMbBpo0KMrkoeC7jzSpnVM0tbzgDTZQlrQEf5V62Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b31b4102-9c96-4335-a2a9-d5486fd56428",
                            TwoFactorEnabled = false,
                            UserName = "robert.williams@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "15050ff2-ed6c-475f-8831-f61d54a29175",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccc930a9-019f-417e-9c5e-5d71583a52b4",
                            Email = "patricia.brown@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEA50UEPMrmCFSYpL67tqu0ts2XrK9QVB+l3tDBYDqkduQa+IqzSRaRLskYRZXk+1GQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3aa5e4cd-6b69-4e7f-9410-58819fcbb8b5",
                            TwoFactorEnabled = false,
                            UserName = "patricia.brown@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "76222e29-cbf5-4335-b2e4-fa6a77afeab1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33b74f88-bc82-4425-83db-97895223f3a2",
                            Email = "jennifer.miller@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMOSSpuPicppP3N1RYSal+3eWcOU9k2vQGILKonMhx2QnAcuruvvheFl+MxZYgfhCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9c9fb8f-9984-4ed8-9bb5-a25e75ebf53c",
                            TwoFactorEnabled = false,
                            UserName = "jennifer.miller@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "3110d510-2d4d-4e84-9f69-84794965586d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05153525-7ec2-4117-85da-786b363e8c7b",
                            Email = "michael.wilson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBu/dLPB4xgVcN4Oa/IQb9oHjl4RB5MbVqFo18u4r4zCFyQUGOtdOth2HtslAKmbFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52438def-acff-44c7-8986-7d4f666429df",
                            TwoFactorEnabled = false,
                            UserName = "michael.wilson@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "d8d0d177-60a0-4925-b4ed-bb36aebb48c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4fd50af-ba73-48b2-a143-2de33f9d63c2",
                            Email = "elizabeth.moore@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHds2yvXP2Wb2Z9PvTuphQUPYFKFkfUSq5cMhvc2R1GQFjI/ulGpPkxNjSmJyTZe+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb6cae5b-980e-4566-bb3f-b39892747943",
                            TwoFactorEnabled = false,
                            UserName = "elizabeth.moore@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "82c99b5d-6573-4514-81eb-183ace313419",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f3d82d3-c669-47db-95c1-944ee781b655",
                            Email = "david.taylor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKxQHl774hHHbNsE8N7vW0QzDU5mdMrrXwxPosHV9ZuiLyosUWptestQPSxrwv/6+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6eff4d26-c0e0-4328-ac02-9fa66e17a351",
                            TwoFactorEnabled = false,
                            UserName = "david.taylor@example.com",
                            UserType = "Patient"
                        },
                        new
                        {
                            Id = "a8d287e8-357a-40f3-893a-ed507ed6a85d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "177626d2-7a1e-45de-a1bf-96759d948fcc",
                            Email = "susan.anderson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIWqeea2a5E+gsfdIPzsEgM0OckeKsa5TSHtKn2IM73b/1+dc02ene/vl4ePaxjWCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "957f6f7c-eff4-4958-97d1-8eff6fd5dc77",
                            TwoFactorEnabled = false,
                            UserName = "susan.anderson@example.com",
                            UserType = "Patient"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the Department");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasComment("Department info");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            IsDeleted = false,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            IsDeleted = false,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            IsDeleted = false,
                            Name = "Internal"
                        },
                        new
                        {
                            Id = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            IsDeleted = false,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            IsDeleted = false,
                            Name = "Oncology"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor`s unique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department works the doctor");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Last Name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Doctor`s monthly salary");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor`s Speciality");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors", t =>
                        {
                            t.HasComment("Doctor info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("78429ef3-6e8f-441a-8224-cf9a41152a2c"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "smith@abv.bg",
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Smith",
                            Salary = 1200m,
                            Specialty = "Cardiology",
                            UserId = "78429ef3-6e8f-441a-8224-cf9a41152a2c"
                        },
                        new
                        {
                            Id = new Guid("38a0afd0-c8d6-4674-b24a-db1e6861fcc8"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "jhondoe@abv.bg",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            Salary = 1000m,
                            Specialty = "Neurology",
                            UserId = "38a0afd0-c8d6-4674-b24a-db1e6861fcc8"
                        },
                        new
                        {
                            Id = new Guid("a15998c9-52af-4c6b-a032-b135b879e5a7"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "jhonson@abv.bg",
                            FirstName = "Sara",
                            IsDeleted = false,
                            LastName = "Johnson",
                            Salary = 1150m,
                            Specialty = "Pediatrics",
                            UserId = "a15998c9-52af-4c6b-a032-b135b879e5a7"
                        },
                        new
                        {
                            Id = new Guid("0b04322a-bab8-41ca-b791-ec1abdd7e8a0"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovp@abv.bg",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Petrov",
                            Salary = 2150m,
                            Specialty = "Surgeon",
                            UserId = "0b04322a-bab8-41ca-b791-ec1abdd7e8a0"
                        },
                        new
                        {
                            Id = new Guid("18538144-c4ee-4d7d-b4eb-fd9267ca134f"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "petrovai@abv.bg",
                            FirstName = "Ivana",
                            IsDeleted = false,
                            LastName = "Petrova",
                            Salary = 4150m,
                            Specialty = "Surgeon",
                            UserId = "18538144-c4ee-4d7d-b4eb-fd9267ca134f"
                        },
                        new
                        {
                            Id = new Guid("c6e29719-7856-4b5f-b5da-84ed3a292877"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "slaveykir@abv.bg",
                            FirstName = "Slavey",
                            IsDeleted = false,
                            LastName = "Kirilov",
                            Salary = 6150m,
                            Specialty = "Oncologyst",
                            UserId = "c6e29719-7856-4b5f-b5da-84ed3a292877"
                        },
                        new
                        {
                            Id = new Guid("57e1941c-1412-4384-b819-d67a19204baf"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "angelovz@abv.bg",
                            FirstName = "Zhoro",
                            IsDeleted = false,
                            LastName = "Angelov",
                            Salary = 3750m,
                            Specialty = "Oncologyst",
                            UserId = "57e1941c-1412-4384-b819-d67a19204baf"
                        },
                        new
                        {
                            Id = new Guid("fddefbf4-e1a5-42a1-a64d-e0843640267c"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "atanasovao@abv.bg",
                            FirstName = "Olya",
                            IsDeleted = false,
                            LastName = "Atanasova",
                            Salary = 3250m,
                            Specialty = "Oncologyst",
                            UserId = "fddefbf4-e1a5-42a1-a64d-e0843640267c"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager unique identifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Manager Full Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Manager phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Data for Hospital Manager");
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse unnique identifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Nurse`s department");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse first name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nurse last name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasComment("Nurse monthly salary");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Nurses", t =>
                        {
                            t.HasComment("Nurse info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5c4962-15bb-4282-bfbf-5a0cd30ba664"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "williams@abv.bg",
                            FirstName = "Emma",
                            IsDeleted = false,
                            LastName = "Williams",
                            Salary = 650m,
                            UserId = "2c5c4962-15bb-4282-bfbf-5a0cd30ba664"
                        },
                        new
                        {
                            Id = new Guid("0f1babbe-d5db-49b9-9624-47b9d69df236"),
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EmailAddress = "brown@abv.bg",
                            FirstName = "Liam",
                            IsDeleted = false,
                            LastName = "Brown",
                            Salary = 1020m,
                            UserId = "0f1babbe-d5db-49b9-9624-47b9d69df236"
                        },
                        new
                        {
                            Id = new Guid("af558d53-8adc-45ba-bfdd-1ca9e11e7185"),
                            DepartmentId = new Guid("3a19290a-8b6d-4551-97ae-b87ecf3f2dd2"),
                            EmailAddress = "davissophia@abv.bg",
                            FirstName = "Sophia",
                            IsDeleted = false,
                            LastName = "Davis",
                            Salary = 670m,
                            UserId = "af558d53-8adc-45ba-bfdd-1ca9e11e7185"
                        },
                        new
                        {
                            Id = new Guid("c55b3e3f-6604-4bf4-a9c8-014d0c146003"),
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EmailAddress = "miller@abv.bg",
                            FirstName = "Noah",
                            IsDeleted = false,
                            LastName = "Miller",
                            Salary = 640m,
                            UserId = "c55b3e3f-6604-4bf4-a9c8-014d0c146003"
                        },
                        new
                        {
                            Id = new Guid("3c8870b2-58cf-4341-8ea1-d024520563d0"),
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EmailAddress = "taylor@abv.bg",
                            FirstName = "Olivia",
                            IsDeleted = false,
                            LastName = "Taylor",
                            Salary = 660m,
                            UserId = "3c8870b2-58cf-4341-8ea1-d024520563d0"
                        },
                        new
                        {
                            Id = new Guid("7c032bc0-04e2-4111-bbfb-a59d46791529"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "taskovao@abv.bg",
                            FirstName = "Olga",
                            IsDeleted = false,
                            LastName = "Taskova",
                            Salary = 680m,
                            UserId = "7c032bc0-04e2-4111-bbfb-a59d46791529"
                        },
                        new
                        {
                            Id = new Guid("23fbee5b-fbe0-49a4-b312-6a5471f79dca"),
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EmailAddress = "nikolovapa@abv.bg",
                            FirstName = "Paola",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            Salary = 680m,
                            UserId = "23fbee5b-fbe0-49a4-b312-6a5471f79dca"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of Patient");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Patient address");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department the patient is assigned");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient Personal Citizen Number");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The person email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient First Name");

                    b.Property<bool>("HasMedicalInsurance")
                        .HasColumnType("bit")
                        .HasComment("Specify if the patient is insured");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient Last Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Patient phone number");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room of the patient");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients", t =>
                        {
                            t.HasComment("Patient Info Table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("45ff5a3c-c27e-4e62-8c90-4954281d46d0"),
                            Address = "Sofi, ul.Rezovo 13, et.2, ap.6",
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EGN = "4810234567",
                            EmailAddress = "ivanovivan@abv.bg",
                            FirstName = "Ivan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            UserId = "45ff5a3c-c27e-4e62-8c90-4954281d46d0"
                        },
                        new
                        {
                            Id = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            Address = "Sofi, ul.Belomorska, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6212094475",
                            EmailAddress = "stefanovp@abv.bg",
                            FirstName = "Petar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Stefanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "57c0a3b2-bf91-4c97-9a31-cb7b454c1415"
                        },
                        new
                        {
                            Id = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            Address = "Sofi, bul.Vitosha 123, et.7, ap.16",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "6102193476",
                            EmailAddress = "petrovlazar@abv.bg",
                            FirstName = "Lazar",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "621fb5c5-b634-405d-951b-3088891c3d5c"
                        },
                        new
                        {
                            Id = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            Address = "Sofi, bul.Vitosha 3, et.7, ap.16",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "8302198562",
                            EmailAddress = "petrovavanya@abv.bg",
                            FirstName = "Vanya",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Petrova",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "dd5538d3-1f68-412f-9949-94edde16d8a2"
                        },
                        new
                        {
                            Id = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            Address = "Sofi, ul.Rezovo 13, et.2, ap.6",
                            DepartmentId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            EGN = "4810234567",
                            EmailAddress = "ivanovivan@abv.bg",
                            FirstName = "Ivan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            UserId = "17e9933d-2a1b-467b-b6a2-79297246b8b3"
                        },
                        new
                        {
                            Id = new Guid("a001bd24-5c2a-4f7a-b000-5f7bd233cd12"),
                            Address = "123 Elm Street",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "1234567890",
                            EmailAddress = "james.anderson@example.com",
                            FirstName = "James",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Anderson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            UserId = "a001bd24-5c2a-4f7a-b000-5f7bd233cd12"
                        },
                        new
                        {
                            Id = new Guid("134d8ce3-4c26-434a-90b4-f59ae5457a01"),
                            Address = "456 Maple Avenue",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "2345678901",
                            EmailAddress = "mary.johnson@example.com",
                            FirstName = "Mary",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Johnson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            UserId = "134d8ce3-4c26-434a-90b4-f59ae5457a01"
                        },
                        new
                        {
                            Id = new Guid("17139a72-76d4-4362-aa27-18a64cc8d285"),
                            Address = "789 Oak Boulevard",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "3456789012",
                            EmailAddress = "robert.williams@example.com",
                            FirstName = "Robert",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Williams",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "17139a72-76d4-4362-aa27-18a64cc8d285"
                        },
                        new
                        {
                            Id = new Guid("15050ff2-ed6c-475f-8831-f61d54a29175"),
                            Address = "321 Pine Lane",
                            DepartmentId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            EGN = "4567890123",
                            EmailAddress = "patricia.brown@example.com",
                            FirstName = "Patricia",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Brown",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            UserId = "15050ff2-ed6c-475f-8831-f61d54a29175"
                        },
                        new
                        {
                            Id = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            Address = "987 Birch Road",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "6789012345",
                            EmailAddress = "jennifer.miller@example.com",
                            FirstName = "Jennifer",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Miller",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "76222e29-cbf5-4335-b2e4-fa6a77afeab1"
                        },
                        new
                        {
                            Id = new Guid("3110d510-2d4d-4e84-9f69-84794965586d"),
                            Address = "159 Walnut Avenue",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "7890123456",
                            EmailAddress = "michael.wilson@example.com",
                            FirstName = "Michael",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Wilson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "3110d510-2d4d-4e84-9f69-84794965586d"
                        },
                        new
                        {
                            Id = new Guid("d8d0d177-60a0-4925-b4ed-bb36aebb48c4"),
                            Address = "159 Walnut Avenue",
                            DepartmentId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            EGN = "8901234567",
                            EmailAddress = "elizabeth.moore@example.com",
                            FirstName = "Elizabeth",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Moore",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            UserId = "d8d0d177-60a0-4925-b4ed-bb36aebb48c4"
                        },
                        new
                        {
                            Id = new Guid("a8d287e8-357a-40f3-893a-ed507ed6a85d"),
                            Address = "123 Elm Court",
                            DepartmentId = new Guid("66ff68b3-846e-5398-805f-06411c1bbdff"),
                            EGN = "0123456789",
                            EmailAddress = "susan.anderson@example.com",
                            FirstName = "Susan",
                            HasMedicalInsurance = true,
                            IsDeleted = false,
                            LastName = "Anderson",
                            PhoneNumber = "No phone",
                            RoomId = new Guid("994355a8-add4-4d49-a52f-f610e4cb6893"),
                            UserId = "a8d287e8-357a-40f3-893a-ed507ed6a85d"
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientsDoctors");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientId", "TreatmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("PatientsTreatments");

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909")
                        },
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2")
                        },
                        new
                        {
                            PatientId = new Guid("57c0a3b2-bf91-4c97-9a31-cb7b454c1415"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            TreatmentId = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2")
                        },
                        new
                        {
                            PatientId = new Guid("76222e29-cbf5-4335-b2e4-fa6a77afeab1"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("17e9933d-2a1b-467b-b6a2-79297246b8b3"),
                            TreatmentId = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667")
                        },
                        new
                        {
                            PatientId = new Guid("621fb5c5-b634-405d-951b-3088891c3d5c"),
                            TreatmentId = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("39bf20f4-81c8-4cd6-9262-61184c8d6b9a")
                        },
                        new
                        {
                            PatientId = new Guid("dd5538d3-1f68-412f-9949-94edde16d8a2"),
                            TreatmentId = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909")
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Room unique identifier");

                    b.Property<int>("BedCount")
                        .HasColumnType("int")
                        .HasComment("Room`s beds count");

                    b.Property<Guid>("DepartmnetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("In which department is the room");

                    b.Property<bool>("HasFreeBeds")
                        .HasColumnType("bit")
                        .HasComment("Does room has free beds?");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int")
                        .HasComment("Room Number");

                    b.HasKey("Id");

                    b.HasIndex("DepartmnetId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasComment("Room information table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a746a43-8fe2-4b2f-b6a3-69104089e8ac"),
                            BedCount = 1,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = new Guid("fc4cc53a-2a34-4232-b63a-0724783fdfa3"),
                            BedCount = 2,
                            DepartmnetId = new Guid("af2f0ad4-ff86-4e51-ab19-630145898ec6"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 102
                        },
                        new
                        {
                            Id = new Guid("334c034e-51e8-4956-a6a5-f25ce92bf8fa"),
                            BedCount = 2,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 201
                        },
                        new
                        {
                            Id = new Guid("3b85738c-1a1a-40a9-952a-465e8914a2e0"),
                            BedCount = 3,
                            DepartmnetId = new Guid("70dd58b3-966e-4498-806f-04411c1bbbee"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 202
                        },
                        new
                        {
                            Id = new Guid("9f415f68-1979-4d9f-ba39-8586cc1d6c4c"),
                            BedCount = 3,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 301
                        },
                        new
                        {
                            Id = new Guid("ff64e198-4cac-40d9-817c-ca3a62637fed"),
                            BedCount = 2,
                            DepartmnetId = new Guid("43f9018c-2a02-448d-b26e-bc832bc097d3"),
                            HasFreeBeds = true,
                            IsDeleted = false,
                            RoomNumber = 302
                        });
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Treatment unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Treatments", t =>
                        {
                            t.HasComment("Treatment info table");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("64e59e91-8492-41a1-a6b5-2e98f6b5f667"),
                            IsDeleted = false,
                            Name = "Manual Therapy",
                            Price = 100.0m
                        },
                        new
                        {
                            Id = new Guid("39bf20f4-81c8-4cd6-9262-61184c8d6b9a"),
                            IsDeleted = false,
                            Name = "Massage Therapy",
                            Price = 80.0m
                        },
                        new
                        {
                            Id = new Guid("bb26ac70-f9dc-426f-9c36-d6105537e909"),
                            IsDeleted = false,
                            Name = "Chiropractic Adjustment",
                            Price = 120.0m
                        },
                        new
                        {
                            Id = new Guid("273f30d9-6c5f-49fa-84a7-734dbdc4a1d2"),
                            IsDeleted = false,
                            Name = "Dialysis",
                            Price = 170.0m
                        },
                        new
                        {
                            Id = new Guid("1e472cfa-5488-49f7-bc90-87bcd37b85c0"),
                            IsDeleted = false,
                            Name = "Physical Therapy",
                            Price = 200.0m
                        },
                        new
                        {
                            Id = new Guid("2a24b3e3-93db-487d-8074-3e5a51217d8c"),
                            IsDeleted = false,
                            Name = "Vaccination",
                            Price = 20.0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("DepartmentDoctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Manager", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Managers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Nurse", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Nurses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Room", "Room")
                        .WithMany("Patients")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientDoctor", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("Doctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.PatientTreatment", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Patient", "Patient")
                        .WithMany("PatientTreatments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.Treatment", "Treatment")
                        .WithMany("Patients")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmnetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalManagmentApp.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.ApplicationUser", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Managers");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Department", b =>
                {
                    b.Navigation("DepartmentDoctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Doctor", b =>
                {
                    b.Navigation("DoctorPatients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Patient", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("PatientTreatments");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Room", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalManagmentApp.DataModels.Treatment", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
